{"ast":null,"code":"var _jsxFileName = \"C:\\\\ra_work\\\\relation-discovery-starter\\\\src\\\\components\\\\BinPlot.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\n// const { kmeans } = require('../ml-kmeans');\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  kmeans\n} = require('ml-kmeans');\nconst BinPlot = ({\n  data\n}) => {\n  _s();\n  const svgRef = useRef();\n  const [xAxis, setXAxis] = useState(\"\");\n  const [binSize, setBinSize] = useState(\"1\");\n  const [percentile, setPercentile] = useState(20);\n  const handleXAxisChange = event => {\n    setXAxis(event.target.value);\n  };\n  const handleBinSizeChange = event => {\n    setBinSize(event.target.value);\n  };\n  const handlePercentileChange = event => {\n    setPercentile(event.target.value);\n  };\n  useEffect(() => {\n    if (data.length > 0) {\n      if (!xAxis) {\n        setXAxis(Object.keys(data[0])[0]);\n      }\n      drawBinPlot();\n    }\n  }, [data, xAxis, binSize, percentile]);\n  const percentileThreshold = (data, percentile) => {\n    if (percentile < 0 || percentile > 100) {\n      console.log('Invalid percentile value');\n      return null;\n    }\n    const sortedData = data.slice().sort((a, b) => a - b);\n    const index = Math.ceil(percentile / 100 * sortedData.length) - 1;\n    return sortedData[index];\n  };\n  const classsifyClusters = (centroids, threshold) => {\n    return centroids.map(centroid => centroid.centroid[0] >= threshold ? 'Top' : 'Not Top');\n  };\n  const renameClusters = (classifiedClusters, clusters) => {\n    return clusters.map(clusterIndex => classifiedClusters[clusterIndex] === 'Top' ? 'Top values' : 'Other values');\n  };\n  const drawBinPlot = () => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove();\n\n    // define width and height of the plot\n    const width = 300;\n    const height = 300;\n    const margin = {\n      top: 20,\n      right: 50,\n      bottom: 50,\n      left: 50\n    };\n\n    // define x scale\n    const x = d3.scaleLinear().domain(d3.extent(data, d => +d[xAxis])).nice().range([margin.left, width - margin.right]);\n\n    // apply k-means clustering to the data, remove NaN values\n    const values = data.map(d => +d[xAxis]).filter(d => !isNaN(d));\n    if (values.length === 0) {\n      console.log('No valid data points for binning');\n      return;\n    }\n    const uniqueValues = new Set(values);\n    const effectiveBinSize = Math.min(+binSize, uniqueValues.size);\n    const kmeansResults = kmeans(values.map(d => [d]), effectiveBinSize);\n    // console.log(kmeansResults);\n\n    // map data points to the bins\n    const bins = Array.from({\n      length: effectiveBinSize\n    }, () => []);\n    kmeansResults.clusters.forEach((cluster, i) => {\n      if (cluster >= 0 && cluster < effectiveBinSize) {\n        bins[cluster].push(values[i]);\n      }\n    });\n    const threshold = percentileThreshold(values, percentile);\n    const classifiedClusters = classsifyClusters(kmeansResults.centroids, threshold);\n    const renamedBins = renameClusters(classifiedClusters, kmeansResults.clusters);\n\n    // define y scale\n    const y = d3.scaleBand().domain(d3.range(effectiveBinSize)).range([height - margin.bottom, margin.top]).padding(0.1);\n\n    // draw the x axis\n    const xAxisG = g => g.attr('transform', `translate(0,${height - margin.bottom})`).call(d3.axisBottom(x).ticks(width / 80)).call(g => g.select('.domain').remove());\n\n    // draw the y axis\n    const yAxisG = g => g.attr('transform', `translate(${margin.left},0)`).call(d3.axisLeft(y).tickFormat(i => `Bin ${i + 1}`)).call(g => g.select('.domain').remove());\n    svg.append('g').call(xAxisG);\n    svg.append('g').call(yAxisG);\n\n    // draw the bins\n    svg.append('g').selectAll('rect').data(bins).join('rect').attr('x', d => x(d3.min(d))).attr('y', (d, i) => y(i)).attr('width', d => x(d3.max(d)) - x(d3.min(d))).attr('height', y.bandwidth()).attr('fill', d => renamedBins[bins.indexOf(d)] === 'Top Values' ? 'steelblue' : 'orange');\n\n    // add text labels\n    svg.append('g').selectAll('text').data(bins).join('text').attr('x', d => x(d3.min(d)) + (x(d3.max(d)) - x(d3.min(d))) / 2);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-blue-100 w-1/2 text-sm\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        width: 300,\n        height: 300\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"xAxis\",\n        children: \"X Axis:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"xAxis\",\n        value: xAxis,\n        onChange: handleXAxisChange,\n        children: data[0] && Object.keys(data[0]).map(key => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: key,\n          children: key\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Bin Size:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: binSize,\n          onChange: handleBinSizeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n_s(BinPlot, \"IkY/bncsBKMvTvQwN3YZd2EewAw=\");\n_c = BinPlot;\nexport default BinPlot;\nvar _c;\n$RefreshReg$(_c, \"BinPlot\");","map":{"version":3,"names":["React","useRef","useEffect","useState","d3","jsxDEV","_jsxDEV","kmeans","require","BinPlot","data","_s","svgRef","xAxis","setXAxis","binSize","setBinSize","percentile","setPercentile","handleXAxisChange","event","target","value","handleBinSizeChange","handlePercentileChange","length","Object","keys","drawBinPlot","percentileThreshold","console","log","sortedData","slice","sort","a","b","index","Math","ceil","classsifyClusters","centroids","threshold","map","centroid","renameClusters","classifiedClusters","clusters","clusterIndex","svg","select","current","selectAll","remove","width","height","margin","top","right","bottom","left","x","scaleLinear","domain","extent","d","nice","range","values","filter","isNaN","uniqueValues","Set","effectiveBinSize","min","size","kmeansResults","bins","Array","from","forEach","cluster","i","push","renamedBins","y","scaleBand","padding","xAxisG","g","attr","call","axisBottom","ticks","yAxisG","axisLeft","tickFormat","append","join","max","bandwidth","indexOf","children","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","key","type","_c","$RefreshReg$"],"sources":["C:/ra_work/relation-discovery-starter/src/components/BinPlot.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport * as d3 from 'd3';\r\n// const { kmeans } = require('../ml-kmeans');\r\nconst { kmeans } = require('ml-kmeans');\r\nconst BinPlot = ({data}) => {\r\n    const svgRef = useRef();\r\n    const [xAxis,setXAxis] = useState(\"\");\r\n    const [binSize,setBinSize] = useState(\"1\");\r\n    const [percentile, setPercentile] = useState(20);\r\n\r\n    const handleXAxisChange = (event) => {\r\n        setXAxis(event.target.value);\r\n    };\r\n\r\n    const handleBinSizeChange = (event) => {\r\n        setBinSize(event.target.value);\r\n    };\r\n\r\n    const handlePercentileChange = (event) => {\r\n        setPercentile(event.target.value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (data.length > 0) {\r\n            if(!xAxis){\r\n                setXAxis(Object.keys(data[0])[0]);\r\n            }\r\n            drawBinPlot();\r\n        }\r\n    }, [data, xAxis, binSize, percentile]);\r\n\r\n    const percentileThreshold = (data, percentile) => {\r\n        if (percentile < 0 || percentile > 100) {\r\n            console.log('Invalid percentile value');\r\n            return null;\r\n        }\r\n        const sortedData = data.slice().sort((a, b) => a - b);\r\n        const index = Math.ceil((percentile / 100) * sortedData.length) - 1;\r\n        return sortedData[index];\r\n    };\r\n\r\n    const classsifyClusters = (centroids, threshold) => {\r\n        return centroids.map(centroid => centroid.centroid[0] >= threshold ? 'Top' : 'Not Top');\r\n    };\r\n\r\n    const renameClusters = (classifiedClusters, clusters) => {\r\n        return clusters.map(clusterIndex => classifiedClusters[clusterIndex] === 'Top' ? 'Top values' : 'Other values');\r\n    };\r\n\r\n        \r\n\r\n    const drawBinPlot = () => {\r\n        const svg = d3.select(svgRef.current);\r\n        svg.selectAll('*').remove();\r\n\r\n        // define width and height of the plot\r\n        const width = 300;\r\n        const height = 300;\r\n        const margin = { top: 20, right: 50, bottom: 50, left: 50 };\r\n\r\n        // define x scale\r\n        const x = d3.scaleLinear()\r\n            .domain(d3.extent(data, d => +d[xAxis])).nice()\r\n            .range([margin.left, width - margin.right]);\r\n\r\n        // apply k-means clustering to the data, remove NaN values\r\n        const values = data.map(d => +d[xAxis]).filter(d => !isNaN(d));\r\n        if (values.length === 0) {\r\n            console.log('No valid data points for binning');\r\n            return;\r\n        }\r\n        const uniqueValues = new Set(values);\r\n        const effectiveBinSize = Math.min(+binSize, uniqueValues.size);\r\n\r\n        const kmeansResults = kmeans(values.map(d => [d]), effectiveBinSize);\r\n        // console.log(kmeansResults);\r\n\r\n    \r\n\r\n        // map data points to the bins\r\n        const bins = Array.from({length: effectiveBinSize}, () => []);\r\n        kmeansResults.clusters.forEach((cluster, i) => {\r\n            if (cluster >=0 && cluster < effectiveBinSize) {\r\n            bins[cluster].push(values[i]);\r\n            }\r\n        });\r\n\r\n        const threshold = percentileThreshold(values, percentile);\r\n        const classifiedClusters = classsifyClusters(kmeansResults.centroids, threshold);\r\n        const renamedBins = renameClusters(classifiedClusters, kmeansResults.clusters);\r\n\r\n        // define y scale\r\n        const y = d3.scaleBand()\r\n            .domain(d3.range(effectiveBinSize))\r\n            .range([height - margin.bottom, margin.top])\r\n            .padding(0.1);\r\n        \r\n        // draw the x axis\r\n        const xAxisG = g => g\r\n        .attr('transform', `translate(0,${height - margin.bottom})`)\r\n        .call(d3.axisBottom(x).ticks(width / 80))\r\n        .call(g => g.select('.domain').remove());\r\n\r\n        // draw the y axis\r\n        const yAxisG = g => g\r\n        .attr('transform', `translate(${margin.left},0)`)\r\n        .call(d3.axisLeft(y).tickFormat (i=> `Bin ${i+1}`))\r\n        .call(g => g.select('.domain').remove());\r\n\r\n        svg.append('g').call(xAxisG);\r\n        svg.append('g').call(yAxisG);\r\n\r\n        // draw the bins\r\n        svg.append('g')\r\n        .selectAll('rect')\r\n        .data(bins)\r\n        .join('rect')\r\n        .attr('x', d => x(d3.min(d)))\r\n        .attr('y', (d, i) => y(i))\r\n        .attr('width', d => x(d3.max(d)) - x(d3.min(d)))\r\n        .attr('height', y.bandwidth())\r\n        .attr('fill', d => renamedBins[bins.indexOf(d)] === 'Top Values' ? 'steelblue' : 'orange');\r\n\r\n        // add text labels\r\n        svg.append('g')\r\n        .selectAll('text')\r\n        .data(bins)\r\n        .join('text')\r\n        .attr('x', d=> x(d3.min(d)) + (x(d3.max(d)) - x(d3.min(d)))/2)\r\n    }\r\n\r\n    return (\r\n    <div>\r\n        <div className='bg-blue-100 w-1/2 text-sm'>\r\n            <svg ref={svgRef} width={300} height={300}></svg>\r\n\r\n            <label htmlFor=\"xAxis\">X Axis:</label>\r\n            <select id=\"xAxis\" value={xAxis} onChange={handleXAxisChange}>\r\n                {data[0] && Object.keys(data[0]).map(key => (\r\n                    <option key={key} value={key}>{key}</option>\r\n                ))}\r\n            </select>\r\n            <label>\r\n                Bin Size:\r\n                <input type=\"number\" value={binSize} onChange={handleBinSizeChange} />\r\n            </label>\r\n        </div>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default BinPlot;\r\n\r\n      \r\n        "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}