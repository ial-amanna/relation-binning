{"ast":null,"code":"var _jsxFileName = \"C:\\\\ra_work\\\\relation-binning\\\\frontend\\\\src\\\\components\\\\BinPlot.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BinPlot = ({\n  data\n}) => {\n  _s();\n  const svgRef = useRef();\n  const [yAxis1, setYAxis1] = useState(\"\");\n  const [yAxis2, setYAxis2] = useState(\"\");\n  const [maxBins, setMaxBins] = useState(5); // Maximum number of bins\n  const [selectedLeftBin, setSelectedLeftBin] = useState(null);\n  const [selectedRightBin, setSelectedRightBin] = useState(null);\n  async function fetchCorrelation() {\n    try {\n      const response = await fetch('http://localhost:8000/get-correlation');\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      return data.correlations;\n    } catch (error) {\n      console.error(\"Error occurred while fetching correlation data:\", error);\n    }\n  }\n  const handleYAxis1Change = async event => {\n    // setYAxis1(event.target.value);\n    try {\n      setYAxis1(event.target.value);\n      const data = {\n        attribute: event.target.value\n      };\n      const response = await fetch('http://localhost:8000/attribute1', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      if (response.ok) {\n        console.log(\"Y Axis 1 changed: \", data);\n      } else {\n        console.error(\"Failed to send Y Axis 1 data:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Error occurred while sending Y Axis 1 data:\", error);\n    }\n  };\n  const handleYAxis2Change = async event => {\n    try {\n      setYAxis2(event.target.value);\n      const data = {\n        attribute: event.target.value\n      };\n      const response = await fetch('http://localhost:8000/attribute2', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      if (response.ok) {\n        console.log(\"Y Axis 2 changed: \", data);\n      } else {\n        console.error(\"Failed to send Y Axis 2 data:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Error occurred while sending Y Axis 2 data:\", error);\n    }\n  };\n  const handleMaxBinsChange = async event => {\n    const value = Math.max(1, Math.min(10, +event.target.value));\n    try {\n      setMaxBins(value);\n      const data = {\n        maxBins: value\n      };\n      const response = await fetch('http://localhost:8000/max-bins', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      if (response.ok) {\n        console.log(\"Max bins changed: \", data);\n      } else {\n        console.error(\"Failed to send max bins data:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Error occurred while sending max bins data:\", error);\n    }\n  };\n  const handleLeftBinClick = async id => {\n    try {\n      setSelectedLeftBin(id);\n      const data = {\n        binIndex: id\n      };\n      const response = await fetch('http://localhost:8000/left-click', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      if (response.ok) {\n        console.log(\"Left bin click: \", data);\n      } else {\n        console.error(\"Failed to send left bin click data:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Error occurred while sending left bin click data:\", error);\n    }\n  };\n  const handleRightBinClick = async id => {\n    try {\n      setSelectedRightBin(id);\n      const data = {\n        binIndex: id\n      };\n      const response = await fetch('http://localhost:8000/right-click', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      if (response.ok) {\n        console.log(\"Right bin clicked: \", data);\n      } else {\n        console.error(\"Failed to send right bin click data:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Error occurred while sending right bin click data:\", error);\n    }\n  };\n  useEffect(() => {\n    if (data.length > 0) {\n      if (!yAxis1) {\n        setYAxis1(Object.keys(data[0])[0]);\n      }\n      if (!yAxis2) {\n        setYAxis2(Object.keys(data[0])[1]); // Initialize yAxis2 with another attribute\n      }\n      drawBinPlot();\n    }\n  }, [data, yAxis1, yAxis2, maxBins]);\n  const drawBinPlot = () => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove();\n    const width = 600;\n    const height = 400;\n    const margin = {\n      top: 20,\n      right: 50,\n      bottom: 50,\n      left: 50\n    };\n    const barWidth = 15;\n    const barSpacing = 20; // Space between sets of bins\n    const binGap = 2; // Gap between bins in the same set\n\n    const filteredData = data.filter(d => d[yAxis1] != null && d[yAxis2] != null);\n    if (filteredData.length === 0) {\n      console.log('No valid data points for plotting');\n      return;\n    }\n    const y1 = d3.scaleLinear().domain(d3.extent(filteredData, d => +d[yAxis1])).nice().range([height - margin.bottom, margin.top]);\n    const y2 = d3.scaleLinear().domain(d3.extent(filteredData, d => +d[yAxis2])).nice().range([height - margin.bottom, margin.top]);\n    const xLeft = d3.scaleLinear().domain([1, maxBins]).range([margin.left, width / 2 - barSpacing]);\n    const xRight = d3.scaleLinear().domain([1, maxBins]).range([width - margin.right - barSpacing, width / 2 + barSpacing]);\n    const maxBinsClamped = Math.max(1, Math.min(10, maxBins));\n    const colorScaleLeft = d3.scaleLinear().domain([1, maxBinsClamped]).range(['orange', 'darkorange']);\n    const colorScaleRight = d3.scaleLinear().domain([1, maxBinsClamped]).range(['steelblue', 'darkblue']);\n\n    // Draw bars for the left attribute (y1)\n    for (let i_left = 1; i_left <= maxBinsClamped; i_left++) {\n      const barHeight = (height - margin.bottom - margin.top - (i_left - 1) * binGap) / i_left;\n      for (let j_left = 0; j_left < i_left; j_left++) {\n        svg.append('rect').attr('x', xLeft(i_left) - barWidth / 2).attr('y', margin.top + j_left * (barHeight + binGap)).attr('width', barWidth).attr('height', barHeight).attr('fill', colorScaleLeft(i_left)).attr('opacity', 0.8).attr('id', `${i_left}${j_left}`) // Add id to each bin\n        .on(\"click\", function () {\n          const id = d3.select(this).attr('id'); // Get ID of clicked element\n          handleLeftBinClick(id); // Pass ID to handler\n        });\n      }\n    }\n\n    // Draw bars for the right attribute (y2)\n    for (let i_right = 1; i_right <= maxBinsClamped; i_right++) {\n      const barHeight = (height - margin.bottom - margin.top - (i_right - 1) * binGap) / i_right;\n      for (let j_right = 0; j_right < i_right; j_right++) {\n        svg.append('rect').attr('x', xRight(i_right) - barWidth / 2) // Reverse order\n        .attr('y', margin.top + j_right * (barHeight + binGap)).attr('width', barWidth).attr('height', barHeight).attr('fill', colorScaleRight(i_right)).attr('opacity', 0.8).attr('id', `${i_right}${j_right}`) // Add id to each bin\n        .on(\"click\", function () {\n          const id = d3.select(this).attr('id'); // Get ID of clicked element\n          handleRightBinClick(id); // Pass ID to handler\n        });\n      }\n    }\n\n    // Draw y1 and y2 axes\n    svg.append('g').attr('transform', `translate(${margin.left},0)`).call(d3.axisLeft(y1));\n    svg.append('g').attr('transform', `translate(${width - margin.right},0)`).call(d3.axisRight(y2));\n\n    // If both bins are selected, map the values\n    if (selectedLeftBin !== null && selectedRightBin !== null) {\n      svg.selectAll('.bin-connection').remove();\n      // Logic to draw lines or connections between corresponding values\n      console.log(maxBinsClamped, selectedLeftBin, selectedRightBin);\n      const leftBinData = filteredData.filter(d => Math.floor(y1(d[yAxis1]) / (height / maxBinsClamped)) === selectedLeftBin - 1);\n      const rightBinData = filteredData.filter(d => Math.floor(y2(d[yAxis2]) / (height / maxBinsClamped)) === maxBinsClamped - selectedRightBin - 1);\n      leftBinData.forEach((leftDatum, idx) => {\n        const rightDatum = rightBinData[idx];\n        if (rightDatum) {\n          svg.append('path').attr('d', d3.line().curve(d3.curveBasis).x(function (d) {\n            return d.x;\n          }).y(function (d) {\n            return d.y;\n          })([{\n            x: xLeft(selectedLeftBin),\n            y: y1(leftDatum[yAxis1])\n          }, {\n            x: (xLeft(selectedLeftBin) + xRight(selectedRightBin)) / 2,\n            y: (y1(leftDatum[yAxis1]) + y2(rightDatum[yAxis2])) / 2\n          }, {\n            x: xRight(selectedRightBin),\n            y: y2(rightDatum[yAxis2])\n          }])).attr('fill', 'none').attr('stroke', 'green').attr('stroke-width', 0.5).attr('opacity', 0.5).attr('class', 'bin-connection');\n        }\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-blue-100 w-1/2 text-sm\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        width: 600,\n        height: 400\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"yAxis1\",\n        children: \"Y Axis 1:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"yAxis1\",\n        value: yAxis1,\n        onChange: handleYAxis1Change,\n        children: data[0] && Object.keys(data[0]).map(key => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: key,\n          children: key\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"yAxis2\",\n        children: \"Y Axis 2:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"yAxis2\",\n        value: yAxis2,\n        onChange: handleYAxis2Change,\n        children: data[0] && Object.keys(data[0]).map(key => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: key,\n          children: key\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Max Bins:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: maxBins,\n          onChange: handleMaxBinsChange,\n          min: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 290,\n    columnNumber: 9\n  }, this);\n};\n_s(BinPlot, \"v6p0qrzqt12jlrRFuM3GsDT/ON4=\");\n_c = BinPlot;\nexport default BinPlot;\nvar _c;\n$RefreshReg$(_c, \"BinPlot\");","map":{"version":3,"names":["React","useRef","useEffect","useState","d3","jsxDEV","_jsxDEV","BinPlot","data","_s","svgRef","yAxis1","setYAxis1","yAxis2","setYAxis2","maxBins","setMaxBins","selectedLeftBin","setSelectedLeftBin","selectedRightBin","setSelectedRightBin","fetchCorrelation","response","fetch","ok","Error","json","correlations","error","console","handleYAxis1Change","event","target","value","attribute","method","headers","body","JSON","stringify","log","statusText","handleYAxis2Change","handleMaxBinsChange","Math","max","min","handleLeftBinClick","id","binIndex","handleRightBinClick","length","Object","keys","drawBinPlot","svg","select","current","selectAll","remove","width","height","margin","top","right","bottom","left","barWidth","barSpacing","binGap","filteredData","filter","d","y1","scaleLinear","domain","extent","nice","range","y2","xLeft","xRight","maxBinsClamped","colorScaleLeft","colorScaleRight","i_left","barHeight","j_left","append","attr","on","i_right","j_right","call","axisLeft","axisRight","leftBinData","floor","rightBinData","forEach","leftDatum","idx","rightDatum","line","curve","curveBasis","x","y","children","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","map","key","type","_c","$RefreshReg$"],"sources":["C:/ra_work/relation-binning/frontend/src/components/BinPlot.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n\r\n\r\nconst BinPlot = ({ data }) => {\r\n    const svgRef = useRef();\r\n    const [yAxis1, setYAxis1] = useState(\"\");\r\n    const [yAxis2, setYAxis2] = useState(\"\");\r\n    const [maxBins, setMaxBins] = useState(5); // Maximum number of bins\r\n    const [selectedLeftBin, setSelectedLeftBin] = useState(null);\r\n    const [selectedRightBin, setSelectedRightBin] = useState(null);\r\n    \r\n\r\n    async function fetchCorrelation(){\r\n        try {\r\n            const response = await fetch('http://localhost:8000/get-correlation');\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n\r\n        const data = await response.json();\r\n        return data.correlations;\r\n        }\r\n        catch (error) {\r\n            console.error(\"Error occurred while fetching correlation data:\", error);\r\n        }\r\n\r\n    }\r\n\r\n    const handleYAxis1Change = async (event) => {\r\n        // setYAxis1(event.target.value);\r\n        try {\r\n            setYAxis1(event.target.value);\r\n\r\n            const data = {attribute: event.target.value};\r\n            const response = await fetch('http://localhost:8000/attribute1', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(data),\r\n            });\r\n            if (response.ok) {\r\n                console.log(\"Y Axis 1 changed: \", data);\r\n            } else {\r\n                console.error(\"Failed to send Y Axis 1 data:\", response.statusText);\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error(\"Error occurred while sending Y Axis 1 data:\", error);\r\n        }\r\n        };\r\n    \r\n    const handleYAxis2Change = async (event) => {\r\n        try {\r\n            setYAxis2(event.target.value);\r\n\r\n            const data = {attribute: event.target.value};\r\n            const response = await fetch('http://localhost:8000/attribute2', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(data),\r\n            });\r\n            if (response.ok) {\r\n                console.log(\"Y Axis 2 changed: \", data);\r\n            } else {\r\n                console.error(\"Failed to send Y Axis 2 data:\", response.statusText);\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error(\"Error occurred while sending Y Axis 2 data:\", error);\r\n        }\r\n    };\r\n    const handleMaxBinsChange = async (event) => {\r\n        const value = Math.max(1, Math.min(10, +event.target.value));\r\n        try {\r\n            setMaxBins(value);\r\n            const data = {maxBins: value};\r\n            const response = await fetch('http://localhost:8000/max-bins', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(data),\r\n            });\r\n            if (response.ok) {\r\n                console.log(\"Max bins changed: \", data);\r\n            } else {\r\n                console.error(\"Failed to send max bins data:\", response.statusText);\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error(\"Error occurred while sending max bins data:\", error);\r\n        }\r\n    };\r\n\r\n    const handleLeftBinClick = async (id) => {\r\n        try {\r\n            setSelectedLeftBin(id);\r\n            \r\n            const data = {binIndex: id};\r\n            \r\n            const response = await fetch('http://localhost:8000/left-click', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(data),\r\n            });\r\n            \r\n            if (response.ok) {\r\n                console.log(\"Left bin click: \", data);\r\n            } else {\r\n                console.error(\"Failed to send left bin click data:\", response.statusText);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error occurred while sending left bin click data:\", error);\r\n        }\r\n    };\r\n        \r\n    const handleRightBinClick = async (id) => {\r\n        try {\r\n            setSelectedRightBin(id);\r\n\r\n            const data = {binIndex: id};\r\n            const response = await fetch('http://localhost:8000/right-click', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(data),\r\n            });\r\n\r\n            if (response.ok) {\r\n                console.log(\"Right bin clicked: \", data);\r\n            } else {\r\n                console.error(\"Failed to send right bin click data:\", response.statusText);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error occurred while sending right bin click data:\", error);\r\n        }\r\n    };\r\n    \r\n\r\n    useEffect(() => {\r\n        if (data.length > 0) {\r\n            if (!yAxis1) {\r\n                setYAxis1(Object.keys(data[0])[0]);\r\n            }\r\n            if (!yAxis2) {\r\n                setYAxis2(Object.keys(data[0])[1]); // Initialize yAxis2 with another attribute\r\n            }\r\n            drawBinPlot();\r\n        }\r\n    }, [data, yAxis1, yAxis2, maxBins]);\r\n\r\n\r\n\r\n\r\n    const drawBinPlot = () => {\r\n        const svg = d3.select(svgRef.current);\r\n        svg.selectAll('*').remove();\r\n    \r\n        const width = 600;\r\n        const height = 400;\r\n        const margin = { top: 20, right: 50, bottom: 50, left: 50 };\r\n        const barWidth = 15;\r\n        const barSpacing = 20;  // Space between sets of bins\r\n        const binGap = 2;       // Gap between bins in the same set\r\n    \r\n        const filteredData = data.filter(d => d[yAxis1] != null && d[yAxis2] != null);\r\n    \r\n        if (filteredData.length === 0) {\r\n            console.log('No valid data points for plotting');\r\n            return;\r\n        }\r\n    \r\n        const y1 = d3.scaleLinear()\r\n            .domain(d3.extent(filteredData, d => +d[yAxis1])).nice()\r\n            .range([height - margin.bottom, margin.top]);\r\n    \r\n        const y2 = d3.scaleLinear()\r\n            .domain(d3.extent(filteredData, d => +d[yAxis2])).nice()\r\n            .range([height - margin.bottom, margin.top]);\r\n    \r\n        const xLeft = d3.scaleLinear()\r\n            .domain([1, maxBins])\r\n            .range([margin.left, width / 2 - barSpacing]);\r\n    \r\n        const xRight = d3.scaleLinear()\r\n            .domain([1, maxBins])\r\n            .range([width - margin.right - barSpacing, width / 2 + barSpacing]);\r\n                    \r\n        const maxBinsClamped = Math.max(1, Math.min(10, maxBins));\r\n    \r\n        const colorScaleLeft = d3.scaleLinear()\r\n            .domain([1, maxBinsClamped])\r\n            .range(['orange', 'darkorange']);\r\n    \r\n        const colorScaleRight = d3.scaleLinear()\r\n            .domain([1, maxBinsClamped])\r\n            .range(['steelblue', 'darkblue']);\r\n    \r\n        // Draw bars for the left attribute (y1)\r\n        for (let i_left = 1; i_left <= maxBinsClamped; i_left++) {\r\n            const barHeight = (height - margin.bottom - margin.top - (i_left - 1) * binGap) / i_left;\r\n            for (let j_left = 0; j_left < i_left; j_left++) {\r\n                svg.append('rect')\r\n                    .attr('x', xLeft(i_left) - barWidth / 2)\r\n                    .attr('y', margin.top + j_left * (barHeight + binGap))\r\n                    .attr('width', barWidth)\r\n                    .attr('height', barHeight)\r\n                    .attr('fill', colorScaleLeft(i_left))\r\n                    .attr('opacity', 0.8)\r\n                    .attr('id', `${i_left}${j_left}`) // Add id to each bin\r\n                    .on(\"click\", function() {\r\n                        const id = d3.select(this).attr('id');  // Get ID of clicked element\r\n                        handleLeftBinClick(id);  // Pass ID to handler\r\n                    });\r\n            }\r\n        }\r\n    \r\n        // Draw bars for the right attribute (y2)\r\n        for (let i_right = 1; i_right <= maxBinsClamped; i_right++) {\r\n            const barHeight = (height - margin.bottom - margin.top - (i_right - 1) * binGap) / i_right;\r\n            for (let j_right = 0; j_right < i_right; j_right++) {\r\n                svg.append('rect')\r\n                .attr('x', xRight(i_right) - barWidth / 2) // Reverse order\r\n                .attr('y', margin.top + j_right * (barHeight + binGap))\r\n                .attr('width', barWidth)\r\n                .attr('height', barHeight)\r\n                .attr('fill', colorScaleRight(i_right))\r\n                .attr('opacity', 0.8)\r\n                .attr('id', `${i_right}${j_right}`) // Add id to each bin\r\n                .on(\"click\", function() {\r\n                    const id = d3.select(this).attr('id');  // Get ID of clicked element\r\n                    handleRightBinClick(id);  // Pass ID to handler\r\n                });\r\n\r\n            }\r\n        }\r\n    \r\n        // Draw y1 and y2 axes\r\n        svg.append('g')\r\n            .attr('transform', `translate(${margin.left},0)`)\r\n            .call(d3.axisLeft(y1));\r\n    \r\n        svg.append('g')\r\n            .attr('transform', `translate(${width - margin.right},0)`)\r\n            .call(d3.axisRight(y2));\r\n        \r\n            \r\n        // If both bins are selected, map the values\r\n        if (selectedLeftBin !== null && selectedRightBin !== null) {\r\n            svg.selectAll('.bin-connection').remove();\r\n            // Logic to draw lines or connections between corresponding values\r\n            console.log(maxBinsClamped, selectedLeftBin, selectedRightBin);\r\n            const leftBinData = filteredData.filter(d => Math.floor(y1(d[yAxis1]) / (height / maxBinsClamped)) === selectedLeftBin - 1);\r\n            const rightBinData = filteredData.filter(d => Math.floor(y2(d[yAxis2]) / (height / maxBinsClamped)) === (maxBinsClamped - selectedRightBin) - 1);\r\n            leftBinData.forEach((leftDatum, idx) => {\r\n                const rightDatum = rightBinData[idx];\r\n                if (rightDatum) {\r\n                    svg.append('path')\r\n                        .attr('d', d3.line()\r\n                        .curve(d3.curveBasis)\r\n                        .x(function(d) {return d.x;})\r\n                        .y(function(d) {return d.y;})\r\n                        ([\r\n                            {x: xLeft(selectedLeftBin), y: y1(leftDatum[yAxis1])},\r\n                            {x: (xLeft(selectedLeftBin) + xRight(selectedRightBin)) / 2, y: (y1(leftDatum[yAxis1]) + y2(rightDatum[yAxis2])) / 2},\r\n                            {x: xRight(selectedRightBin), y: y2(rightDatum[yAxis2])}\r\n                        ]))\r\n                        .attr('fill', 'none')\r\n                        .attr('stroke', 'green')\r\n                        .attr('stroke-width', 0.5)\r\n                        .attr('opacity', 0.5)\r\n                        .attr('class', 'bin-connection')\r\n                                    }\r\n            });\r\n        }   \r\n    };  \r\n\r\n\r\n\r\n        \r\n    return (\r\n        <div>\r\n            <div className='bg-blue-100 w-1/2 text-sm'>\r\n                <svg ref={svgRef} width={600} height={400}></svg> {/* Adjusted SVG size */}\r\n    \r\n                <label htmlFor=\"yAxis1\">Y Axis 1:</label>\r\n                <select id=\"yAxis1\" value={yAxis1} onChange={handleYAxis1Change}>\r\n                    {data[0] && Object.keys(data[0]).map(key => (\r\n                        <option key={key} value={key}>{key}</option>\r\n                    ))}\r\n                </select>\r\n    \r\n                <label htmlFor=\"yAxis2\">Y Axis 2:</label>\r\n                <select id=\"yAxis2\" value={yAxis2} onChange={handleYAxis2Change}>\r\n                    {data[0] && Object.keys(data[0]).map(key => (\r\n                        <option key={key} value={key}>{key}</option>\r\n                    ))}\r\n                </select>\r\n    \r\n                <label>\r\n                    Max Bins:\r\n                    <input type=\"number\" value={maxBins} onChange={handleMaxBinsChange} min=\"1\" />\r\n                </label>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default BinPlot;\r\n\r\n      \r\n        "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}