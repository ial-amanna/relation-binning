{"ast":null,"code":"import React,{useRef,useEffect,useState}from'react';import*as d3 from'd3';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BinPlot=_ref=>{let{data}=_ref;const svgRef=useRef();const[yAxis1,setYAxis1]=useState(\"\");const[yAxis2,setYAxis2]=useState(\"\");const[maxBins,setMaxBins]=useState(5);// Maximum number of bins\nconst[selectedLeftBin,setSelectedLeftBin]=useState(null);const[selectedRightBin,setSelectedRightBin]=useState(null);async function fetchCorrelation(){try{const response=await fetch('http://localhost:8000/get-correlation');if(!response.ok){throw new Error('Network response was not ok');}const data=await response.json();return data.correlations;}catch(error){console.error(\"Error occurred while fetching correlation data:\",error);return[];}}function getColorFromCorrelation(correlation){// Define your color scale based on correlation value\nconst colorScale=d3.scaleLinear().domain([-1,0,1])// Assuming correlation ranges from -1 to 1\n.range([\"red\",\"white\",\"green\"]);// Colors from negative to positive correlation\nreturn colorScale(correlation);}const handleYAxis1Change=async event=>{// setYAxis1(event.target.value);\ntry{setYAxis1(event.target.value);const data={attribute:event.target.value};const response=await fetch('http://localhost:8000/attribute1',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});if(response.ok){console.log(\"Y Axis 1 changed: \",data);}else{console.error(\"Failed to send Y Axis 1 data:\",response.statusText);}}catch(error){console.error(\"Error occurred while sending Y Axis 1 data:\",error);}};const handleYAxis2Change=async event=>{try{setYAxis2(event.target.value);const data={attribute:event.target.value};const response=await fetch('http://localhost:8000/attribute2',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});if(response.ok){console.log(\"Y Axis 2 changed: \",data);}else{console.error(\"Failed to send Y Axis 2 data:\",response.statusText);}}catch(error){console.error(\"Error occurred while sending Y Axis 2 data:\",error);}};const handleMaxBinsChange=async event=>{const value=Math.max(1,Math.min(10,+event.target.value));try{setMaxBins(value);const data={maxBins:value};const response=await fetch('http://localhost:8000/max-bins',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});if(response.ok){console.log(\"Max bins changed: \",data);}else{console.error(\"Failed to send max bins data:\",response.statusText);}}catch(error){console.error(\"Error occurred while sending max bins data:\",error);}};const handleLeftBinClick=async id=>{try{setSelectedLeftBin(id);const data={binIndex:id};const response=await fetch('http://localhost:8000/left-click',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});if(response.ok){console.log(\"Left bin click: \",data);}else{console.error(\"Failed to send left bin click data:\",response.statusText);}}catch(error){console.error(\"Error occurred while sending left bin click data:\",error);}};const handleRightBinClick=async id=>{try{setSelectedRightBin(id);const data={binIndex:id};const response=await fetch('http://localhost:8000/right-click',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});if(response.ok){console.log(\"Right bin clicked: \",data);}else{console.error(\"Failed to send right bin click data:\",response.statusText);}}catch(error){console.error(\"Error occurred while sending right bin click data:\",error);}};useEffect(()=>{if(data.length>0){if(!yAxis1){setYAxis1(Object.keys(data[0])[0]);}if(!yAxis2){setYAxis2(Object.keys(data[0])[1]);// Initialize yAxis2 with another attribute\n}drawBinPlot();}},[data,yAxis1,yAxis2,maxBins]);async function drawBinPlot(){const svg=d3.select(svgRef.current);svg.selectAll('*').remove();const width=600;const height=400;const margin={top:20,right:50,bottom:50,left:50};const barWidth=15;const barSpacing=20;// Space between sets of bins\nconst binGap=2;// Gap between bins in the same set\nconst filteredData=data.filter(d=>d[yAxis1]!=null&&d[yAxis2]!=null);if(filteredData.length===0){console.log('No valid data points for plotting');return;}const y1=d3.scaleLinear().domain(d3.extent(filteredData,d=>+d[yAxis1])).nice().range([height-margin.bottom,margin.top]);const y2=d3.scaleLinear().domain(d3.extent(filteredData,d=>+d[yAxis2])).nice().range([height-margin.bottom,margin.top]);const xLeft=d3.scaleLinear().domain([1,maxBins]).range([margin.left,width/2-barSpacing]);const xRight=d3.scaleLinear().domain([1,maxBins]).range([width-margin.right-barSpacing,width/2+barSpacing]);const maxBinsClamped=Math.max(1,Math.min(10,maxBins));const colorScaleLeft=d3.scaleLinear().domain([1,maxBinsClamped]).range(['orange','darkorange']);const colorScaleRight=d3.scaleLinear().domain([1,maxBinsClamped]).range(['steelblue','darkblue']);// Draw bars for the left attribute (y1)\nfor(let i_left=1;i_left<=maxBinsClamped;i_left++){const barHeight=(height-margin.bottom-margin.top-(i_left-1)*binGap)/i_left;for(let j_left=0;j_left<i_left;j_left++){svg.append('rect').attr('x',xLeft(i_left)-barWidth/2).attr('y',margin.top+j_left*(barHeight+binGap)).attr('width',barWidth).attr('height',barHeight).attr('fill',colorScaleLeft(i_left)).attr('opacity',0.8).attr('id',\"\".concat(i_left).concat(j_left))// Add id to each bin\n.on(\"click\",function(){const id=d3.select(this).attr('id');// Get ID of clicked element\nhandleLeftBinClick(id);// Pass ID to handler\n});}}const correlations=await fetchCorrelation();// Get correlations from backend\n// Draw bars for the right attribute (y2)\nfor(let i_right=1;i_right<=maxBinsClamped;i_right++){const barHeight=(height-margin.bottom-margin.top-(i_right-1)*binGap)/i_right;for(let j_right=0;j_right<i_right;j_right++){const correlationIndex=(i_right-1)*maxBinsClamped+j_right;// Calculate index for correlations\nconst correlation=correlations[correlationIndex];// Get the corresponding correlation value\nconst color=getColorFromCorrelation(correlation);// Get color based on correlation\nsvg.append('rect').attr('x',xRight(i_right)-barWidth/2)// Reverse order\n.attr('y',margin.top+j_right*(barHeight+binGap)).attr('width',barWidth).attr('height',barHeight).attr('fill',color).attr('opacity',0.8).attr('id',\"\".concat(i_right).concat(j_right))// Add id to each bin\n.on(\"click\",function(){const id=d3.select(this).attr('id');// Get ID of clicked element\nhandleRightBinClick(id);// Pass ID to handler\n});}}// Draw y1 and y2 axes\nsvg.append('g').attr('transform',\"translate(\".concat(margin.left,\",0)\")).call(d3.axisLeft(y1));svg.append('g').attr('transform',\"translate(\".concat(width-margin.right,\",0)\")).call(d3.axisRight(y2));// If both bins are selected, map the values\nif(selectedLeftBin!==null&&selectedRightBin!==null){svg.selectAll('.bin-connection').remove();// Logic to draw lines or connections between corresponding values\nconsole.log(maxBinsClamped,selectedLeftBin,selectedRightBin);const leftBinData=filteredData.filter(d=>Math.floor(y1(d[yAxis1])/(height/maxBinsClamped))===selectedLeftBin-1);const rightBinData=filteredData.filter(d=>Math.floor(y2(d[yAxis2])/(height/maxBinsClamped))===maxBinsClamped-selectedRightBin-1);leftBinData.forEach((leftDatum,idx)=>{const rightDatum=rightBinData[idx];if(rightDatum){svg.append('path').attr('d',d3.line().curve(d3.curveBasis).x(function(d){return d.x;}).y(function(d){return d.y;})([{x:xLeft(selectedLeftBin),y:y1(leftDatum[yAxis1])},{x:(xLeft(selectedLeftBin)+xRight(selectedRightBin))/2,y:(y1(leftDatum[yAxis1])+y2(rightDatum[yAxis2]))/2},{x:xRight(selectedRightBin),y:y2(rightDatum[yAxis2])}])).attr('fill','none').attr('stroke','green').attr('stroke-width',0.5).attr('opacity',0.5).attr('class','bin-connection');}});}};return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"div\",{className:\"bg-blue-100 w-1/2 text-sm\",children:[/*#__PURE__*/_jsx(\"svg\",{ref:svgRef,width:600,height:400}),\" \",/*#__PURE__*/_jsx(\"label\",{htmlFor:\"yAxis1\",children:\"Y Axis 1:\"}),/*#__PURE__*/_jsx(\"select\",{id:\"yAxis1\",value:yAxis1,onChange:handleYAxis1Change,children:data[0]&&Object.keys(data[0]).map(key=>/*#__PURE__*/_jsx(\"option\",{value:key,children:key},key))}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"yAxis2\",children:\"Y Axis 2:\"}),/*#__PURE__*/_jsx(\"select\",{id:\"yAxis2\",value:yAxis2,onChange:handleYAxis2Change,children:data[0]&&Object.keys(data[0]).map(key=>/*#__PURE__*/_jsx(\"option\",{value:key,children:key},key))}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Max Bins:\",/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:maxBins,onChange:handleMaxBinsChange,min:\"1\"})]})]})});};export default BinPlot;","map":{"version":3,"names":["React","useRef","useEffect","useState","d3","jsx","_jsx","jsxs","_jsxs","BinPlot","_ref","data","svgRef","yAxis1","setYAxis1","yAxis2","setYAxis2","maxBins","setMaxBins","selectedLeftBin","setSelectedLeftBin","selectedRightBin","setSelectedRightBin","fetchCorrelation","response","fetch","ok","Error","json","correlations","error","console","getColorFromCorrelation","correlation","colorScale","scaleLinear","domain","range","handleYAxis1Change","event","target","value","attribute","method","headers","body","JSON","stringify","log","statusText","handleYAxis2Change","handleMaxBinsChange","Math","max","min","handleLeftBinClick","id","binIndex","handleRightBinClick","length","Object","keys","drawBinPlot","svg","select","current","selectAll","remove","width","height","margin","top","right","bottom","left","barWidth","barSpacing","binGap","filteredData","filter","d","y1","extent","nice","y2","xLeft","xRight","maxBinsClamped","colorScaleLeft","colorScaleRight","i_left","barHeight","j_left","append","attr","concat","on","i_right","j_right","correlationIndex","color","call","axisLeft","axisRight","leftBinData","floor","rightBinData","forEach","leftDatum","idx","rightDatum","line","curve","curveBasis","x","y","children","className","ref","htmlFor","onChange","map","key","type"],"sources":["C:/ra_work/relation-binning/frontend/src/components/BinPlot.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n\r\n\r\nconst BinPlot = ({ data }) => {\r\n    const svgRef = useRef();\r\n    const [yAxis1, setYAxis1] = useState(\"\");\r\n    const [yAxis2, setYAxis2] = useState(\"\");\r\n    const [maxBins, setMaxBins] = useState(5); // Maximum number of bins\r\n    const [selectedLeftBin, setSelectedLeftBin] = useState(null);\r\n    const [selectedRightBin, setSelectedRightBin] = useState(null);\r\n    \r\n\r\n    async function fetchCorrelation(){\r\n        try {\r\n            const response = await fetch('http://localhost:8000/get-correlation');\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n\r\n        const data = await response.json();\r\n        return data.correlations;\r\n        }\r\n        catch (error) {\r\n            console.error(\"Error occurred while fetching correlation data:\", error);\r\n            return [];\r\n        }\r\n\r\n    }\r\n    function getColorFromCorrelation(correlation) {\r\n        // Define your color scale based on correlation value\r\n        const colorScale = d3.scaleLinear()\r\n            .domain([-1, 0, 1])  // Assuming correlation ranges from -1 to 1\r\n            .range([\"red\", \"white\", \"green\"]);  // Colors from negative to positive correlation\r\n\r\n        return colorScale(correlation);\r\n    }\r\n\r\n\r\n    const handleYAxis1Change = async (event) => {\r\n        // setYAxis1(event.target.value);\r\n        try {\r\n            setYAxis1(event.target.value);\r\n\r\n            const data = {attribute: event.target.value};\r\n            const response = await fetch('http://localhost:8000/attribute1', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(data),\r\n            });\r\n            if (response.ok) {\r\n                console.log(\"Y Axis 1 changed: \", data);\r\n            } else {\r\n                console.error(\"Failed to send Y Axis 1 data:\", response.statusText);\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error(\"Error occurred while sending Y Axis 1 data:\", error);\r\n        }\r\n        };\r\n    \r\n    const handleYAxis2Change = async (event) => {\r\n        try {\r\n            setYAxis2(event.target.value);\r\n\r\n            const data = {attribute: event.target.value};\r\n            const response = await fetch('http://localhost:8000/attribute2', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(data),\r\n            });\r\n            if (response.ok) {\r\n                console.log(\"Y Axis 2 changed: \", data);\r\n            } else {\r\n                console.error(\"Failed to send Y Axis 2 data:\", response.statusText);\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error(\"Error occurred while sending Y Axis 2 data:\", error);\r\n        }\r\n    };\r\n    const handleMaxBinsChange = async (event) => {\r\n        const value = Math.max(1, Math.min(10, +event.target.value));\r\n        try {\r\n            setMaxBins(value);\r\n            const data = {maxBins: value};\r\n            const response = await fetch('http://localhost:8000/max-bins', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(data),\r\n            });\r\n            if (response.ok) {\r\n                console.log(\"Max bins changed: \", data);\r\n            } else {\r\n                console.error(\"Failed to send max bins data:\", response.statusText);\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error(\"Error occurred while sending max bins data:\", error);\r\n        }\r\n    };\r\n\r\n    const handleLeftBinClick = async (id) => {\r\n        try {\r\n            setSelectedLeftBin(id);\r\n            \r\n            const data = {binIndex: id};\r\n            \r\n            const response = await fetch('http://localhost:8000/left-click', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(data),\r\n            });\r\n            \r\n            if (response.ok) {\r\n                console.log(\"Left bin click: \", data);\r\n            } else {\r\n                console.error(\"Failed to send left bin click data:\", response.statusText);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error occurred while sending left bin click data:\", error);\r\n        }\r\n    };\r\n        \r\n    const handleRightBinClick = async (id) => {\r\n        try {\r\n            setSelectedRightBin(id);\r\n\r\n            const data = {binIndex: id};\r\n            const response = await fetch('http://localhost:8000/right-click', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(data),\r\n            });\r\n\r\n            if (response.ok) {\r\n                console.log(\"Right bin clicked: \", data);\r\n            } else {\r\n                console.error(\"Failed to send right bin click data:\", response.statusText);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error occurred while sending right bin click data:\", error);\r\n        }\r\n    };\r\n    \r\n\r\n    useEffect(() => {\r\n        if (data.length > 0) {\r\n            if (!yAxis1) {\r\n                setYAxis1(Object.keys(data[0])[0]);\r\n            }\r\n            if (!yAxis2) {\r\n                setYAxis2(Object.keys(data[0])[1]); // Initialize yAxis2 with another attribute\r\n            }\r\n            drawBinPlot();\r\n        }\r\n    }, [data, yAxis1, yAxis2, maxBins]);\r\n\r\n\r\n\r\n\r\n    async function drawBinPlot() {\r\n        const svg = d3.select(svgRef.current);\r\n        svg.selectAll('*').remove();\r\n    \r\n        const width = 600;\r\n        const height = 400;\r\n        const margin = { top: 20, right: 50, bottom: 50, left: 50 };\r\n        const barWidth = 15;\r\n        const barSpacing = 20;  // Space between sets of bins\r\n        const binGap = 2;       // Gap between bins in the same set\r\n    \r\n        const filteredData = data.filter(d => d[yAxis1] != null && d[yAxis2] != null);\r\n    \r\n        if (filteredData.length === 0) {\r\n            console.log('No valid data points for plotting');\r\n            return;\r\n        }\r\n    \r\n        const y1 = d3.scaleLinear()\r\n            .domain(d3.extent(filteredData, d => +d[yAxis1])).nice()\r\n            .range([height - margin.bottom, margin.top]);\r\n    \r\n        const y2 = d3.scaleLinear()\r\n            .domain(d3.extent(filteredData, d => +d[yAxis2])).nice()\r\n            .range([height - margin.bottom, margin.top]);\r\n    \r\n        const xLeft = d3.scaleLinear()\r\n            .domain([1, maxBins])\r\n            .range([margin.left, width / 2 - barSpacing]);\r\n    \r\n        const xRight = d3.scaleLinear()\r\n            .domain([1, maxBins])\r\n            .range([width - margin.right - barSpacing, width / 2 + barSpacing]);\r\n                    \r\n        const maxBinsClamped = Math.max(1, Math.min(10, maxBins));\r\n    \r\n        const colorScaleLeft = d3.scaleLinear()\r\n            .domain([1, maxBinsClamped])\r\n            .range(['orange', 'darkorange']);\r\n    \r\n        const colorScaleRight = d3.scaleLinear()\r\n            .domain([1, maxBinsClamped])\r\n            .range(['steelblue', 'darkblue']);\r\n    \r\n        // Draw bars for the left attribute (y1)\r\n        for (let i_left = 1; i_left <= maxBinsClamped; i_left++) {\r\n            const barHeight = (height - margin.bottom - margin.top - (i_left - 1) * binGap) / i_left;\r\n            for (let j_left = 0; j_left < i_left; j_left++) {\r\n                svg.append('rect')\r\n                    .attr('x', xLeft(i_left) - barWidth / 2)\r\n                    .attr('y', margin.top + j_left * (barHeight + binGap))\r\n                    .attr('width', barWidth)\r\n                    .attr('height', barHeight)\r\n                    .attr('fill', colorScaleLeft(i_left))\r\n                    .attr('opacity', 0.8)\r\n                    .attr('id', `${i_left}${j_left}`) // Add id to each bin\r\n                    .on(\"click\", function() {\r\n                        const id = d3.select(this).attr('id');  // Get ID of clicked element\r\n                        handleLeftBinClick(id);  // Pass ID to handler\r\n                    });\r\n            }\r\n        }\r\n        const correlations = await fetchCorrelation();  // Get correlations from backend\r\n    \r\n        // Draw bars for the right attribute (y2)\r\n        for (let i_right = 1; i_right <= maxBinsClamped; i_right++) {\r\n            const barHeight = (height - margin.bottom - margin.top - (i_right - 1) * binGap) / i_right;\r\n\r\n            for (let j_right = 0; j_right < i_right; j_right++) {\r\n\r\n                const correlationIndex = (i_right - 1) * maxBinsClamped + j_right;  // Calculate index for correlations\r\n                const correlation = correlations[correlationIndex];  // Get the corresponding correlation value\r\n                const color = getColorFromCorrelation(correlation);  // Get color based on correlation\r\n\r\n                svg.append('rect')\r\n                .attr('x', xRight(i_right) - barWidth / 2) // Reverse order\r\n                .attr('y', margin.top + j_right * (barHeight + binGap))\r\n                .attr('width', barWidth)\r\n                .attr('height', barHeight)\r\n                .attr('fill', color)\r\n                .attr('opacity', 0.8)\r\n                .attr('id', `${i_right}${j_right}`) // Add id to each bin\r\n                .on(\"click\", function() {\r\n                    const id = d3.select(this).attr('id');  // Get ID of clicked element\r\n                    handleRightBinClick(id);  // Pass ID to handler\r\n                });\r\n\r\n            }\r\n        }\r\n    \r\n        // Draw y1 and y2 axes\r\n        svg.append('g')\r\n            .attr('transform', `translate(${margin.left},0)`)\r\n            .call(d3.axisLeft(y1));\r\n    \r\n        svg.append('g')\r\n            .attr('transform', `translate(${width - margin.right},0)`)\r\n            .call(d3.axisRight(y2));\r\n        \r\n            \r\n        // If both bins are selected, map the values\r\n        if (selectedLeftBin !== null && selectedRightBin !== null) {\r\n            svg.selectAll('.bin-connection').remove();\r\n            // Logic to draw lines or connections between corresponding values\r\n            console.log(maxBinsClamped, selectedLeftBin, selectedRightBin);\r\n            const leftBinData = filteredData.filter(d => Math.floor(y1(d[yAxis1]) / (height / maxBinsClamped)) === selectedLeftBin - 1);\r\n            const rightBinData = filteredData.filter(d => Math.floor(y2(d[yAxis2]) / (height / maxBinsClamped)) === (maxBinsClamped - selectedRightBin) - 1);\r\n            leftBinData.forEach((leftDatum, idx) => {\r\n                const rightDatum = rightBinData[idx];\r\n                if (rightDatum) {\r\n                    svg.append('path')\r\n                        .attr('d', d3.line()\r\n                        .curve(d3.curveBasis)\r\n                        .x(function(d) {return d.x;})\r\n                        .y(function(d) {return d.y;})\r\n                        ([\r\n                            {x: xLeft(selectedLeftBin), y: y1(leftDatum[yAxis1])},\r\n                            {x: (xLeft(selectedLeftBin) + xRight(selectedRightBin)) / 2, y: (y1(leftDatum[yAxis1]) + y2(rightDatum[yAxis2])) / 2},\r\n                            {x: xRight(selectedRightBin), y: y2(rightDatum[yAxis2])}\r\n                        ]))\r\n                        .attr('fill', 'none')\r\n                        .attr('stroke', 'green')\r\n                        .attr('stroke-width', 0.5)\r\n                        .attr('opacity', 0.5)\r\n                        .attr('class', 'bin-connection')\r\n                                    }\r\n            });\r\n        }   \r\n    };  \r\n\r\n\r\n\r\n        \r\n    return (\r\n        <div>\r\n            <div className='bg-blue-100 w-1/2 text-sm'>\r\n                <svg ref={svgRef} width={600} height={400}></svg> {/* Adjusted SVG size */}\r\n    \r\n                <label htmlFor=\"yAxis1\">Y Axis 1:</label>\r\n                <select id=\"yAxis1\" value={yAxis1} onChange={handleYAxis1Change}>\r\n                    {data[0] && Object.keys(data[0]).map(key => (\r\n                        <option key={key} value={key}>{key}</option>\r\n                    ))}\r\n                </select>\r\n    \r\n                <label htmlFor=\"yAxis2\">Y Axis 2:</label>\r\n                <select id=\"yAxis2\" value={yAxis2} onChange={handleYAxis2Change}>\r\n                    {data[0] && Object.keys(data[0]).map(key => (\r\n                        <option key={key} value={key}>{key}</option>\r\n                    ))}\r\n                </select>\r\n    \r\n                <label>\r\n                    Max Bins:\r\n                    <input type=\"number\" value={maxBins} onChange={handleMaxBinsChange} min=\"1\" />\r\n                </label>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default BinPlot;\r\n\r\n      \r\n        "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}