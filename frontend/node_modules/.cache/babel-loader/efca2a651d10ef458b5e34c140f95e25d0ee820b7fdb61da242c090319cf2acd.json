{"ast":null,"code":"var _jsxFileName = \"C:\\\\ra_work\\\\relation-binning\\\\frontend\\\\src\\\\components\\\\BinPlot.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BinPlot = ({\n  data\n}) => {\n  _s();\n  const svgRef = useRef();\n  const [yAxis1, setYAxis1] = useState(\"\");\n  const [yAxis2, setYAxis2] = useState(\"\");\n  const [maxBins, setMaxBins] = useState(5); // Maximum number of bins\n  const [selectedLeftBin, setSelectedLeftBin] = useState(null);\n  const [selectedRightBin, setSelectedRightBin] = useState(null);\n  const handleYAxis1Change = event => {\n    setYAxis1(event.target.value);\n  };\n  const handleYAxis2Change = event => {\n    setYAxis2(event.target.value);\n  };\n  const handleMaxBinsChange = event => {\n    const value = Math.max(1, Math.min(10, +event.target.value));\n    setMaxBins(value);\n  };\n  const handleLeftBinClick = id => {\n    console.log(\"Left bin clicked: \", parseInt(id.split('-')[0].slice(4)));\n    setSelectedLeftBin(parseInt(id.split('-')[0].slice(4)));\n  };\n  const handleRightBinClick = id => {\n    console.log(\"Right bin clicked: \", parseInt(id.split('-')[0].slice(4)));\n    setSelectedRightBin(parseInt(id.split('-')[0].slice(4)));\n  };\n  useEffect(() => {\n    if (data.length > 0) {\n      if (!yAxis1) {\n        setYAxis1(Object.keys(data[0])[0]);\n      }\n      if (!yAxis2) {\n        setYAxis2(Object.keys(data[0])[1]); // Initialize yAxis2 with another attribute\n      }\n      drawBinPlot();\n    }\n  }, [data, yAxis1, yAxis2, maxBins]);\n  const drawBinPlot = () => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove();\n    const width = 600;\n    const height = 400;\n    const margin = {\n      top: 20,\n      right: 50,\n      bottom: 50,\n      left: 50\n    };\n    const barWidth = 15;\n    const barSpacing = 20; // Space between sets of bins\n    const binGap = 2; // Gap between bins in the same set\n\n    const filteredData = data.filter(d => d[yAxis1] != null && d[yAxis2] != null);\n    if (filteredData.length === 0) {\n      console.log('No valid data points for plotting');\n      return;\n    }\n    const y1 = d3.scaleLinear().domain(d3.extent(filteredData, d => +d[yAxis1])).nice().range([height - margin.bottom, margin.top]);\n    const y2 = d3.scaleLinear().domain(d3.extent(filteredData, d => +d[yAxis2])).nice().range([height - margin.bottom, margin.top]);\n    const xLeft = d3.scaleLinear().domain([1, maxBins]).range([margin.left, width / 2 - barSpacing]);\n    const xRight = d3.scaleLinear().domain([1, maxBins]).range([width - margin.right - barSpacing, width / 2 + barSpacing]);\n    const maxBinsClamped = Math.max(1, Math.min(10, maxBins));\n    const colorScaleLeft = d3.scaleLinear().domain([1, maxBinsClamped]).range(['orange', 'darkorange']);\n    const colorScaleRight = d3.scaleLinear().domain([1, maxBinsClamped]).range(['steelblue', 'darkblue']);\n\n    // Draw bars for the left attribute (y1)\n    for (let i_left = 1; i_left <= maxBinsClamped; i_left++) {\n      const barHeight = (height - margin.bottom - margin.top - (i_left - 1) * binGap) / i_left;\n      for (let j_left = 0; j_left < i_left; j_left++) {\n        svg.append('rect').attr('x', xLeft(i_left) - barWidth / 2).attr('y', margin.top + j_left * (barHeight + binGap)).attr('width', barWidth).attr('height', barHeight).attr('fill', colorScaleLeft(i_left)).attr('opacity', 0.8).attr('id', `left${i_left}-${j_left}`) // Add id to each bin\n        .on(\"click\", function () {\n          const id = d3.select(this).attr('id'); // Get the id of the clicked element\n          console.log(\"Element ID:\", id); // Debugging: Check if ID is retrieved\n\n          handleLeftBinClick(id); // Pass the id to the click handler function\n        });\n      }\n\n      // Draw bars for the right attribute (y2)\n      for (let i_right = 1; i_right <= maxBinsClamped; i_right++) {\n        const barHeight = (height - margin.bottom - margin.top - (i_right - 1) * binGap) / i_right;\n        for (let j_right = 0; j_right < i_right; j_right++) {\n          svg.append('rect').attr('x', xRight(i_right) - barWidth / 2) // Reverse order\n          .attr('y', margin.top + j_right * (barHeight + binGap)).attr('width', barWidth).attr('height', barHeight).attr('fill', colorScaleRight(i_right)).attr('opacity', 0.8).attr('id', `right${i_right}-${j_right}`) // Add id to each bin\n          .on(\"click\", function () {\n            const id = d3.select(this).attr('id'); // Get the id of the clicked element\n            handleRightBinClick(id);\n          }); // Pass the id to the click handler function\n        }\n      }\n\n      // Draw y1 and y2 axes\n      svg.append('g').attr('transform', `translate(${margin.left},0)`).call(d3.axisLeft(y1));\n      svg.append('g').attr('transform', `translate(${width - margin.right},0)`).call(d3.axisRight(y2));\n\n      // If both bins are selected, map the values\n      if (selectedLeftBin !== null && selectedRightBin !== null) {\n        svg.selectAll('.bin-connection').remove();\n        // Logic to draw lines or connections between corresponding values\n        console.log(maxBinsClamped, selectedLeftBin, selectedRightBin);\n        const leftBinData = filteredData.filter(d => Math.floor(y1(d[yAxis1]) / (height / maxBinsClamped)) === selectedLeftBin - 1);\n        const rightBinData = filteredData.filter(d => Math.floor(y2(d[yAxis2]) / (height / maxBinsClamped)) === maxBinsClamped - selectedRightBin - 1);\n        leftBinData.forEach((leftDatum, idx) => {\n          const rightDatum = rightBinData[idx];\n          if (rightDatum) {\n            svg.append('path').attr('d', d3.line().curve(d3.curveBasis).x(function (d) {\n              return d.x;\n            }).y(function (d) {\n              return d.y;\n            })([{\n              x: xLeft(selectedLeftBin),\n              y: y1(leftDatum[yAxis1])\n            }, {\n              x: (xLeft(selectedLeftBin) + xRight(selectedRightBin)) / 2,\n              y: (y1(leftDatum[yAxis1]) + y2(rightDatum[yAxis2])) / 2\n            }, {\n              x: xRight(selectedRightBin),\n              y: y2(rightDatum[yAxis2])\n            }])).attr('fill', 'none').attr('stroke', 'green').attr('stroke-width', 0.5).attr('opacity', 0.5).attr('class', 'bin-connection');\n          }\n        });\n      }\n    }\n    ;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-blue-100 w-1/2 text-sm\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          ref: svgRef,\n          width: 600,\n          height: 400\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 17\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"yAxis1\",\n          children: \"Y Axis 1:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"yAxis1\",\n          value: yAxis1,\n          onChange: handleYAxis1Change,\n          children: data[0] && Object.keys(data[0]).map(key => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: key,\n            children: key\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"yAxis2\",\n          children: \"Y Axis 2:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"yAxis2\",\n          value: yAxis2,\n          onChange: handleYAxis2Change,\n          children: data[0] && Object.keys(data[0]).map(key => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: key,\n            children: key\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Max Bins:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: maxBins,\n            onChange: handleMaxBinsChange,\n            min: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }, this);\n  };\n};\n_s(BinPlot, \"v6p0qrzqt12jlrRFuM3GsDT/ON4=\");\n_c = BinPlot;\nexport default BinPlot;\nvar _c;\n$RefreshReg$(_c, \"BinPlot\");","map":{"version":3,"names":["React","useRef","useEffect","useState","d3","jsxDEV","_jsxDEV","BinPlot","data","_s","svgRef","yAxis1","setYAxis1","yAxis2","setYAxis2","maxBins","setMaxBins","selectedLeftBin","setSelectedLeftBin","selectedRightBin","setSelectedRightBin","handleYAxis1Change","event","target","value","handleYAxis2Change","handleMaxBinsChange","Math","max","min","handleLeftBinClick","id","console","log","parseInt","split","slice","handleRightBinClick","length","Object","keys","drawBinPlot","svg","select","current","selectAll","remove","width","height","margin","top","right","bottom","left","barWidth","barSpacing","binGap","filteredData","filter","d","y1","scaleLinear","domain","extent","nice","range","y2","xLeft","xRight","maxBinsClamped","colorScaleLeft","colorScaleRight","i_left","barHeight","j_left","append","attr","on","i_right","j_right","call","axisLeft","axisRight","leftBinData","floor","rightBinData","forEach","leftDatum","idx","rightDatum","line","curve","curveBasis","x","y","children","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","map","key","type","_c","$RefreshReg$"],"sources":["C:/ra_work/relation-binning/frontend/src/components/BinPlot.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n\r\nconst BinPlot = ({ data }) => {\r\n    const svgRef = useRef();\r\n    const [yAxis1, setYAxis1] = useState(\"\");\r\n    const [yAxis2, setYAxis2] = useState(\"\");\r\n    const [maxBins, setMaxBins] = useState(5); // Maximum number of bins\r\n    const [selectedLeftBin, setSelectedLeftBin] = useState(null);\r\n    const [selectedRightBin, setSelectedRightBin] = useState(null);\r\n    \r\n    const handleYAxis1Change = (event) => {\r\n        setYAxis1(event.target.value);\r\n    };\r\n\r\n    const handleYAxis2Change = (event) => {\r\n        setYAxis2(event.target.value);\r\n    };\r\n    const handleMaxBinsChange = (event) => {\r\n        const value = Math.max(1, Math.min(10, +event.target.value));\r\n        setMaxBins(value);\r\n    };\r\n\r\n    const handleLeftBinClick = (id) => {\r\n        console.log(\"Left bin clicked: \", parseInt(id.split('-')[0].slice(4)));\r\n        setSelectedLeftBin(parseInt(id.split('-')[0].slice(4)));\r\n    };\r\n    \r\n    const handleRightBinClick = (id) => {\r\n        console.log(\"Right bin clicked: \", parseInt(id.split('-')[0].slice(4)));\r\n        setSelectedRightBin(parseInt(id.split('-')[0].slice(4)));\r\n    };\r\n    \r\n\r\n    useEffect(() => {\r\n        if (data.length > 0) {\r\n            if (!yAxis1) {\r\n                setYAxis1(Object.keys(data[0])[0]);\r\n            }\r\n            if (!yAxis2) {\r\n                setYAxis2(Object.keys(data[0])[1]); // Initialize yAxis2 with another attribute\r\n            }\r\n            drawBinPlot();\r\n        }\r\n    }, [data, yAxis1, yAxis2, maxBins]);\r\n\r\n\r\n\r\n\r\n    const drawBinPlot = () => {\r\n        const svg = d3.select(svgRef.current);\r\n        svg.selectAll('*').remove();\r\n    \r\n        const width = 600;\r\n        const height = 400;\r\n        const margin = { top: 20, right: 50, bottom: 50, left: 50 };\r\n        const barWidth = 15;\r\n        const barSpacing = 20;  // Space between sets of bins\r\n        const binGap = 2;       // Gap between bins in the same set\r\n    \r\n        const filteredData = data.filter(d => d[yAxis1] != null && d[yAxis2] != null);\r\n    \r\n        if (filteredData.length === 0) {\r\n            console.log('No valid data points for plotting');\r\n            return;\r\n        }\r\n    \r\n        const y1 = d3.scaleLinear()\r\n            .domain(d3.extent(filteredData, d => +d[yAxis1])).nice()\r\n            .range([height - margin.bottom, margin.top]);\r\n    \r\n        const y2 = d3.scaleLinear()\r\n            .domain(d3.extent(filteredData, d => +d[yAxis2])).nice()\r\n            .range([height - margin.bottom, margin.top]);\r\n    \r\n        const xLeft = d3.scaleLinear()\r\n            .domain([1, maxBins])\r\n            .range([margin.left, width / 2 - barSpacing]);\r\n    \r\n        const xRight = d3.scaleLinear()\r\n            .domain([1, maxBins])\r\n            .range([width - margin.right - barSpacing, width / 2 + barSpacing]);\r\n                    \r\n        const maxBinsClamped = Math.max(1, Math.min(10, maxBins));\r\n    \r\n        const colorScaleLeft = d3.scaleLinear()\r\n            .domain([1, maxBinsClamped])\r\n            .range(['orange', 'darkorange']);\r\n    \r\n        const colorScaleRight = d3.scaleLinear()\r\n            .domain([1, maxBinsClamped])\r\n            .range(['steelblue', 'darkblue']);\r\n    \r\n        // Draw bars for the left attribute (y1)\r\n        for (let i_left = 1; i_left <= maxBinsClamped; i_left++) {\r\n            const barHeight = (height - margin.bottom - margin.top - (i_left - 1) * binGap) / i_left;\r\n            for (let j_left = 0; j_left < i_left; j_left++) {\r\n                svg.append('rect')\r\n                    .attr('x', xLeft(i_left) - barWidth / 2)\r\n                    .attr('y', margin.top + j_left * (barHeight + binGap))\r\n                    .attr('width', barWidth)\r\n                    .attr('height', barHeight)\r\n                    .attr('fill', colorScaleLeft(i_left))\r\n                    .attr('opacity', 0.8)\r\n                    .attr('id', `left${i_left}-${j_left}`) // Add id to each bin\r\n                    .on(\"click\", function() {\r\n                        const id = d3.select(this).attr('id');  // Get the id of the clicked element\r\n                        console.log(\"Element ID:\", id);  // Debugging: Check if ID is retrieved\r\n\r\n                        handleLeftBinClick(id);  // Pass the id to the click handler function\r\n\r\n                        }\r\n                        )\r\n        }\r\n    \r\n        // Draw bars for the right attribute (y2)\r\n        for (let i_right = 1; i_right <= maxBinsClamped; i_right++) {\r\n            const barHeight = (height - margin.bottom - margin.top - (i_right - 1) * binGap) / i_right;\r\n            for (let j_right = 0; j_right < i_right; j_right++) {\r\n                svg.append('rect')\r\n                .attr('x', xRight(i_right) - barWidth / 2) // Reverse order\r\n                .attr('y', margin.top + j_right * (barHeight + binGap))\r\n                .attr('width', barWidth)\r\n                .attr('height', barHeight)\r\n                .attr('fill', colorScaleRight(i_right))\r\n                .attr('opacity', 0.8)\r\n                .attr('id', `right${i_right}-${j_right}`) // Add id to each bin\r\n                .on(\"click\", function() {\r\n                    const id = d3.select(this).attr('id');  // Get the id of the clicked element\r\n                    handleRightBinClick(id);\r\n                  }\r\n                  )  // Pass the id to the click handler function\r\n            \r\n            }\r\n        }\r\n    \r\n        // Draw y1 and y2 axes\r\n        svg.append('g')\r\n            .attr('transform', `translate(${margin.left},0)`)\r\n            .call(d3.axisLeft(y1));\r\n    \r\n        svg.append('g')\r\n            .attr('transform', `translate(${width - margin.right},0)`)\r\n            .call(d3.axisRight(y2));\r\n        \r\n            \r\n        // If both bins are selected, map the values\r\n        if (selectedLeftBin !== null && selectedRightBin !== null) {\r\n            svg.selectAll('.bin-connection').remove();\r\n            // Logic to draw lines or connections between corresponding values\r\n            console.log(maxBinsClamped, selectedLeftBin, selectedRightBin);\r\n            const leftBinData = filteredData.filter(d => Math.floor(y1(d[yAxis1]) / (height / maxBinsClamped)) === selectedLeftBin - 1);\r\n            const rightBinData = filteredData.filter(d => Math.floor(y2(d[yAxis2]) / (height / maxBinsClamped)) === (maxBinsClamped - selectedRightBin) - 1);\r\n            leftBinData.forEach((leftDatum, idx) => {\r\n                const rightDatum = rightBinData[idx];\r\n                if (rightDatum) {\r\n                    svg.append('path')\r\n                        .attr('d', d3.line()\r\n                        .curve(d3.curveBasis)\r\n                        .x(function(d) {return d.x;})\r\n                        .y(function(d) {return d.y;})\r\n                        ([\r\n                            {x: xLeft(selectedLeftBin), y: y1(leftDatum[yAxis1])},\r\n                            {x: (xLeft(selectedLeftBin) + xRight(selectedRightBin)) / 2, y: (y1(leftDatum[yAxis1]) + y2(rightDatum[yAxis2])) / 2},\r\n                            {x: xRight(selectedRightBin), y: y2(rightDatum[yAxis2])}\r\n                        ]))\r\n                        .attr('fill', 'none')\r\n                        .attr('stroke', 'green')\r\n                        .attr('stroke-width', 0.5)\r\n                        .attr('opacity', 0.5)\r\n                        .attr('class', 'bin-connection')\r\n                                    }\r\n            });\r\n        }   \r\n    };  \r\n\r\n\r\n\r\n        \r\n    return (\r\n        <div>\r\n            <div className='bg-blue-100 w-1/2 text-sm'>\r\n                <svg ref={svgRef} width={600} height={400}></svg> {/* Adjusted SVG size */}\r\n    \r\n                <label htmlFor=\"yAxis1\">Y Axis 1:</label>\r\n                <select id=\"yAxis1\" value={yAxis1} onChange={handleYAxis1Change}>\r\n                    {data[0] && Object.keys(data[0]).map(key => (\r\n                        <option key={key} value={key}>{key}</option>\r\n                    ))}\r\n                </select>\r\n    \r\n                <label htmlFor=\"yAxis2\">Y Axis 2:</label>\r\n                <select id=\"yAxis2\" value={yAxis2} onChange={handleYAxis2Change}>\r\n                    {data[0] && Object.keys(data[0]).map(key => (\r\n                        <option key={key} value={key}>{key}</option>\r\n                    ))}\r\n                </select>\r\n    \r\n                <label>\r\n                    Max Bins:\r\n                    <input type=\"number\" value={maxBins} onChange={handleMaxBinsChange} min=\"1\" />\r\n                </label>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n};\r\nexport default BinPlot;\r\n\r\n      \r\n        "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}