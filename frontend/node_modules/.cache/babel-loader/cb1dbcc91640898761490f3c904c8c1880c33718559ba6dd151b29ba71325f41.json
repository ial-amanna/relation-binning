{"ast":null,"code":"var _jsxFileName = \"C:\\\\ra_work\\\\relation-binning\\\\src\\\\components\\\\BinPlot.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BinPlot = ({\n  data\n}) => {\n  _s();\n  const svgRef = useRef();\n  const [yAxis1, setYAxis1] = useState(\"\");\n  const [yAxis2, setYAxis2] = useState(\"\");\n  const [maxBins, setMaxBins] = useState(5); // Maximum number of bins\n\n  const handleYAxis1Change = event => {\n    setYAxis1(event.target.value);\n  };\n  const handleYAxis2Change = event => {\n    setYAxis2(event.target.value);\n  };\n  const handleMaxBinsChange = event => {\n    setMaxBins(parseInt(event.target.value, 10));\n  };\n  useEffect(() => {\n    if (data.length > 0) {\n      if (!yAxis1) {\n        setYAxis1(Object.keys(data[0])[0]);\n      }\n      if (!yAxis2) {\n        setYAxis2(Object.keys(data[0])[1]); // Initialize yAxis2 with another attribute\n      }\n      drawBinPlot();\n    }\n  }, [data, yAxis1, yAxis2, maxBins]);\n  const drawBinPlot = () => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove();\n    const width = 600;\n    const height = 400;\n    const margin = {\n      top: 20,\n      right: 50,\n      bottom: 50,\n      left: 50\n    };\n\n    // Define y1 and y2 scales for the two y-attributes\n    const y1 = d3.scaleLinear().domain(d3.extent(data, d => +d[yAxis1])).nice().range([height - margin.bottom, margin.top]);\n    const y2 = d3.scaleLinear().domain(d3.extent(data, d => +d[yAxis2])).nice().range([height - margin.bottom, margin.top]);\n\n    // Define x scale to position the y-attributes\n    const x = d3.scalePoint().domain([yAxis1, yAxis2]).range([margin.left, width - margin.right]);\n\n    // Calculate bins for y1 and y2\n    const y1Bins = d3.histogram().domain(y1.domain()).thresholds(y1.ticks(maxBins))(data.map(d => +d[yAxis1]));\n    const y2Bins = d3.histogram().domain(y2.domain()).thresholds(y2.ticks(maxBins))(data.map(d => +d[yAxis2]));\n\n    // Draw y1 and y2 axes\n    const yAxisG1 = g => g.attr('transform', `translate(${x(yAxis1)},0)`).call(d3.axisLeft(y1));\n    const yAxisG2 = g => g.attr('transform', `translate(${x(yAxis2)},0)`).call(d3.axisRight(y2));\n    svg.append('g').call(yAxisG1);\n    svg.append('g').call(yAxisG2);\n\n    // Draw the lines connecting bins between y1 and y2\n    y1Bins.forEach((bin1, i) => {\n      const bin2 = y2Bins[i];\n\n      // For each bin in y1, find the corresponding bin in y2 and draw a line\n      bin1.forEach((d, j) => {\n        svg.append('line').attr('x1', x(yAxis1)).attr('y1', y1(d)).attr('x2', x(yAxis2)).attr('y2', y2(bin2[j])).attr('stroke', 'steelblue').attr('stroke-width', 1.5).attr('opacity', 0.6);\n      });\n    });\n\n    // Optionally, you can also draw circles at each bin position for clarity\n    svg.append('g').selectAll('circle').data(data).join('circle').attr('cx', d => x(yAxis1)).attr('cy', d => y1(+d[yAxis1])).attr('r', 3).attr('fill', 'orange');\n    svg.append('g').selectAll('circle').data(data).join('circle').attr('cx', d => x(yAxis2)).attr('cy', d => y2(+d[yAxis2])).attr('r', 3).attr('fill', 'orange');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-blue-100 w-1/2 text-sm\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        width: 600,\n        height: 400\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"yAxis1\",\n        children: \"Y Axis 1:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"yAxis1\",\n        value: yAxis1,\n        onChange: handleYAxis1Change,\n        children: data[0] && Object.keys(data[0]).map(key => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: key,\n          children: key\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"yAxis2\",\n        children: \"Y Axis 2:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"yAxis2\",\n        value: yAxis2,\n        onChange: handleYAxis2Change,\n        children: data[0] && Object.keys(data[0]).map(key => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: key,\n          children: key\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Max Bins:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: maxBins,\n          onChange: handleMaxBinsChange,\n          min: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n};\n_s(BinPlot, \"OsVo1te/nS3JVR0kaA2O+qneSUg=\");\n_c = BinPlot;\nexport default BinPlot;\nvar _c;\n$RefreshReg$(_c, \"BinPlot\");","map":{"version":3,"names":["React","useRef","useEffect","useState","d3","jsxDEV","_jsxDEV","BinPlot","data","_s","svgRef","yAxis1","setYAxis1","yAxis2","setYAxis2","maxBins","setMaxBins","handleYAxis1Change","event","target","value","handleYAxis2Change","handleMaxBinsChange","parseInt","length","Object","keys","drawBinPlot","svg","select","current","selectAll","remove","width","height","margin","top","right","bottom","left","y1","scaleLinear","domain","extent","d","nice","range","y2","x","scalePoint","y1Bins","histogram","thresholds","ticks","map","y2Bins","yAxisG1","g","attr","call","axisLeft","yAxisG2","axisRight","append","forEach","bin1","i","bin2","j","join","children","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","key","type","min","_c","$RefreshReg$"],"sources":["C:/ra_work/relation-binning/src/components/BinPlot.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n\r\nconst BinPlot = ({ data }) => {\r\n    const svgRef = useRef();\r\n    const [yAxis1, setYAxis1] = useState(\"\");\r\n    const [yAxis2, setYAxis2] = useState(\"\");\r\n    const [maxBins, setMaxBins] = useState(5); // Maximum number of bins\r\n\r\n    const handleYAxis1Change = (event) => {\r\n        setYAxis1(event.target.value);\r\n    };\r\n\r\n    const handleYAxis2Change = (event) => {\r\n        setYAxis2(event.target.value);\r\n    };\r\n\r\n    const handleMaxBinsChange = (event) => {\r\n        setMaxBins(parseInt(event.target.value, 10));\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (data.length > 0) {\r\n            if (!yAxis1) {\r\n                setYAxis1(Object.keys(data[0])[0]);\r\n            }\r\n            if (!yAxis2) {\r\n                setYAxis2(Object.keys(data[0])[1]); // Initialize yAxis2 with another attribute\r\n            }\r\n            drawBinPlot();\r\n        }\r\n    }, [data, yAxis1, yAxis2, maxBins]);\r\n\r\n\r\n       \r\n\r\n    const drawBinPlot = () => {\r\n        const svg = d3.select(svgRef.current);\r\n        svg.selectAll('*').remove();\r\n    \r\n        const width = 600;\r\n        const height = 400;\r\n        const margin = { top: 20, right: 50, bottom: 50, left: 50 };\r\n    \r\n        // Define y1 and y2 scales for the two y-attributes\r\n        const y1 = d3.scaleLinear()\r\n            .domain(d3.extent(data, d => +d[yAxis1])).nice()\r\n            .range([height - margin.bottom, margin.top]);\r\n    \r\n        const y2 = d3.scaleLinear()\r\n            .domain(d3.extent(data, d => +d[yAxis2])).nice()\r\n            .range([height - margin.bottom, margin.top]);\r\n    \r\n        // Define x scale to position the y-attributes\r\n        const x = d3.scalePoint()\r\n            .domain([yAxis1, yAxis2])\r\n            .range([margin.left, width - margin.right]);\r\n    \r\n        // Calculate bins for y1 and y2\r\n        const y1Bins = d3.histogram()\r\n            .domain(y1.domain())\r\n            .thresholds(y1.ticks(maxBins))(data.map(d => +d[yAxis1]));\r\n    \r\n        const y2Bins = d3.histogram()\r\n            .domain(y2.domain())\r\n            .thresholds(y2.ticks(maxBins))(data.map(d => +d[yAxis2]));\r\n    \r\n        // Draw y1 and y2 axes\r\n        const yAxisG1 = g => g\r\n            .attr('transform', `translate(${x(yAxis1)},0)`)\r\n            .call(d3.axisLeft(y1));\r\n    \r\n        const yAxisG2 = g => g\r\n            .attr('transform', `translate(${x(yAxis2)},0)`)\r\n            .call(d3.axisRight(y2));\r\n    \r\n        svg.append('g').call(yAxisG1);\r\n        svg.append('g').call(yAxisG2);\r\n    \r\n        // Draw the lines connecting bins between y1 and y2\r\n        y1Bins.forEach((bin1, i) => {\r\n            const bin2 = y2Bins[i];\r\n    \r\n            // For each bin in y1, find the corresponding bin in y2 and draw a line\r\n            bin1.forEach((d, j) => {\r\n                svg.append('line')\r\n                    .attr('x1', x(yAxis1))\r\n                    .attr('y1', y1(d))\r\n                    .attr('x2', x(yAxis2))\r\n                    .attr('y2', y2(bin2[j]))\r\n                    .attr('stroke', 'steelblue')\r\n                    .attr('stroke-width', 1.5)\r\n                    .attr('opacity', 0.6);\r\n            });\r\n        });\r\n    \r\n        // Optionally, you can also draw circles at each bin position for clarity\r\n        svg.append('g')\r\n            .selectAll('circle')\r\n            .data(data)\r\n            .join('circle')\r\n            .attr('cx', d => x(yAxis1))\r\n            .attr('cy', d => y1(+d[yAxis1]))\r\n            .attr('r', 3)\r\n            .attr('fill', 'orange');\r\n    \r\n        svg.append('g')\r\n            .selectAll('circle')\r\n            .data(data)\r\n            .join('circle')\r\n            .attr('cx', d => x(yAxis2))\r\n            .attr('cy', d => y2(+d[yAxis2]))\r\n            .attr('r', 3)\r\n            .attr('fill', 'orange');\r\n    };\r\n    \r\n    return (\r\n        <div>\r\n            <div className='bg-blue-100 w-1/2 text-sm'>\r\n                <svg ref={svgRef} width={600} height={400}></svg> {/* Adjusted SVG size */}\r\n    \r\n                <label htmlFor=\"yAxis1\">Y Axis 1:</label>\r\n                <select id=\"yAxis1\" value={yAxis1} onChange={handleYAxis1Change}>\r\n                    {data[0] && Object.keys(data[0]).map(key => (\r\n                        <option key={key} value={key}>{key}</option>\r\n                    ))}\r\n                </select>\r\n    \r\n                <label htmlFor=\"yAxis2\">Y Axis 2:</label>\r\n                <select id=\"yAxis2\" value={yAxis2} onChange={handleYAxis2Change}>\r\n                    {data[0] && Object.keys(data[0]).map(key => (\r\n                        <option key={key} value={key}>{key}</option>\r\n                    ))}\r\n                </select>\r\n    \r\n                <label>\r\n                    Max Bins:\r\n                    <input type=\"number\" value={maxBins} onChange={handleMaxBinsChange} min=\"2\" />\r\n                </label>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default BinPlot;\r\n\r\n      \r\n        "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}