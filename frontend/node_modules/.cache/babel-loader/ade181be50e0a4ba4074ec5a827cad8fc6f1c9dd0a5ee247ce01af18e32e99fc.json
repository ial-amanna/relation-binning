{"ast":null,"code":"var _jsxFileName = \"C:\\\\ra_work\\\\relation-discovery-starter\\\\src\\\\components\\\\BinPlot.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\n// const { kmeans } = require('../ml-kmeans');\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  kmeans\n} = require('ml-kmeans');\nconst BinPlot = ({\n  data\n}) => {\n  _s();\n  const svgRef = useRef();\n  const [xAxis, setXAxis] = useState(\"\");\n  const [binSize, setBinSize] = useState(\"1\");\n  const handleXAxisChange = event => {\n    setXAxis(event.target.value);\n  };\n  const handleBinSizeChange = event => {\n    setBinSize(event.target.value);\n  };\n  useEffect(() => {\n    if (data.length > 0) {\n      if (!xAxis) {\n        setXAxis(Object.keys(data[0])[0]);\n      }\n      drawBinPlot();\n    }\n  }, [data, xAxis, binSize]);\n\n  // calculate percentile\n  const calculatePercentile = (value, array) => {\n    const sortedArray = array.sort((a, b) => a - b);\n    const index = sortedArray.indexOf(value);\n    return index / (sortedArray.length - 1) * 100;\n  };\n  const drawBinPlot = () => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove();\n\n    // define width and height of the plot\n    const width = 300;\n    const height = 300;\n    const margin = {\n      top: 20,\n      right: 50,\n      bottom: 50,\n      left: 50\n    };\n\n    // define x scale\n    const x = d3.scaleLinear().domain(d3.extent(data, d => +d[xAxis])).nice().range([margin.left, width - margin.right]);\n\n    // apply k-means clustering to the data, remove NaN values\n    const values = data.map(d => +d[xAxis]).filter(d => !isNaN(d));\n    if (values.length === 0) {\n      console.log('No valid data points for binning');\n      return;\n    }\n    const uniqueValues = new Set(values);\n    const effectiveBinSize = Math.min(+binSize, uniqueValues.size);\n    const kmeansResults = kmeans(values.map(d => [d]), effectiveBinSize);\n    // console.log(kmeansResults);\n    const binCenters = kmeansResults.centroids.map(d => d[0]);\n    const binPercentiles = binCenters.map(center => calculatePercentile(center, values));\n\n    // Function to generate bin labels\n    const generateBinLabel = i => {\n      if (i === 0) {\n        return `<= ${binCenters[i].toFixed(2)} (0-${binPercentiles[i].toFixed(2)}%)`;\n      } else if (i === effectiveBinSize - 1) {\n        return `> ${binCenters[i - 1].toFixed(2)} (${binPercentiles[i - 1].toFixed(2)}-100%)`;\n      } else {\n        return `> ${binCenters[i - 1].toFixed(2)} (${binPercentiles[i - 1].toFixed(2)}-${binPercentiles[i].toFixed(2)}%)`;\n      }\n    };\n    const binLabels = binPercentiles.map(generateBinLabel);\n\n    // map data points to the bins\n    const bins = Array.from({\n      length: effectiveBinSize\n    }, () => []);\n    kmeansResults.clusters.forEach((cluster, i) => {\n      if (cluster >= 0 && cluster < effectiveBinSize) {\n        bins[cluster].push(values[i]);\n      }\n    });\n\n    // define y scale\n    const y = d3.scaleBand().domain(binLabels).range([height - margin.bottom, margin.top]).padding(0.1);\n\n    // draw the x axis\n    const xAxisG = g => g.attr('transform', `translate(0,${height - margin.bottom})`).call(d3.axisBottom(x).ticks(width / 80)).call(g => g.select('.domain').remove());\n\n    // draw the y axis\n    const yAxisG = g => g.attr('transform', `translate(${margin.left},0)`).call(d3.axisLeft(y)).call(g => g.select('.domain').remove());\n    svg.append('g').call(xAxisG);\n    svg.append('g').call(yAxisG);\n\n    // draw the bins\n    svg.append('g').selectAll('rect').data(bins.map((bin, i) => ({\n      values: bin,\n      label: binLabels[i]\n    }))).join('rect').attr('x', d => x(d3.min(d))).attr('y', (d, i) => y(i)).attr('width', d => x(d3.max(d)) - x(d3.min(d))).attr('height', y.bandwidth()).attr('fill', 'steelblue');\n    svg.append('g').selectAll('text').data(bins.map((bin, i) => ({\n      values: bin,\n      label: binLabels[i]\n    }))).join('text').attr('x', d => x(d3.min(d.values)) + 5).attr('y', d => y(d.label) + y.bandwidth() / 2).attr('dy', '0.35em').text(d => d.label).attr('fill', 'white').attr('font-size', '12px');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-blue-100 w-1/2 text-sm\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        width: 300,\n        height: 300\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"xAxis\",\n        children: \"X Axis:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"xAxis\",\n        value: xAxis,\n        onChange: handleXAxisChange,\n        children: data[0] && Object.keys(data[0]).map(key => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: key,\n          children: key\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Bin Size:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: binSize,\n          onChange: handleBinSizeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(BinPlot, \"ZmnBOQy5EtzYyUGbykvfq3o7QHU=\");\n_c = BinPlot;\nexport default BinPlot;\nvar _c;\n$RefreshReg$(_c, \"BinPlot\");","map":{"version":3,"names":["React","useRef","useEffect","useState","d3","jsxDEV","_jsxDEV","kmeans","require","BinPlot","data","_s","svgRef","xAxis","setXAxis","binSize","setBinSize","handleXAxisChange","event","target","value","handleBinSizeChange","length","Object","keys","drawBinPlot","calculatePercentile","array","sortedArray","sort","a","b","index","indexOf","svg","select","current","selectAll","remove","width","height","margin","top","right","bottom","left","x","scaleLinear","domain","extent","d","nice","range","values","map","filter","isNaN","console","log","uniqueValues","Set","effectiveBinSize","Math","min","size","kmeansResults","binCenters","centroids","binPercentiles","center","generateBinLabel","i","toFixed","binLabels","bins","Array","from","clusters","forEach","cluster","push","y","scaleBand","padding","xAxisG","g","attr","call","axisBottom","ticks","yAxisG","axisLeft","append","bin","label","join","max","bandwidth","text","children","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","key","type","_c","$RefreshReg$"],"sources":["C:/ra_work/relation-discovery-starter/src/components/BinPlot.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport * as d3 from 'd3';\r\n// const { kmeans } = require('../ml-kmeans');\r\nconst { kmeans } = require('ml-kmeans');\r\nconst BinPlot = ({data}) => {\r\n    const svgRef = useRef();\r\n    const [xAxis,setXAxis] = useState(\"\");\r\n    const [binSize,setBinSize] = useState(\"1\");\r\n\r\n    const handleXAxisChange = (event) => {\r\n        setXAxis(event.target.value);\r\n    };\r\n\r\n    const handleBinSizeChange = (event) => {\r\n        setBinSize(event.target.value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (data.length > 0) {\r\n            if(!xAxis){\r\n                setXAxis(Object.keys(data[0])[0]);\r\n            }\r\n            drawBinPlot();\r\n        }\r\n    }, [data, xAxis, binSize]);\r\n\r\n    // calculate percentile\r\n    const calculatePercentile = (value, array) => {\r\n        const sortedArray = array.sort((a, b) => a - b);\r\n        const index = sortedArray.indexOf(value);\r\n        return (index / (sortedArray.length - 1)) * 100;\r\n    };\r\n    const drawBinPlot = () => {\r\n        const svg = d3.select(svgRef.current);\r\n        svg.selectAll('*').remove();\r\n\r\n        // define width and height of the plot\r\n        const width = 300;\r\n        const height = 300;\r\n        const margin = { top: 20, right: 50, bottom: 50, left: 50 };\r\n\r\n        // define x scale\r\n        const x = d3.scaleLinear()\r\n            .domain(d3.extent(data, d => +d[xAxis])).nice()\r\n            .range([margin.left, width - margin.right]);\r\n\r\n        // apply k-means clustering to the data, remove NaN values\r\n        const values = data.map(d => +d[xAxis]).filter(d => !isNaN(d));\r\n        if (values.length === 0) {\r\n            console.log('No valid data points for binning');\r\n            return;\r\n        }\r\n        const uniqueValues = new Set(values);\r\n        const effectiveBinSize = Math.min(+binSize, uniqueValues.size);\r\n\r\n        const kmeansResults = kmeans(values.map(d => [d]), effectiveBinSize);\r\n        // console.log(kmeansResults);\r\n        const binCenters = kmeansResults.centroids.map(d => d[0]);\r\n        const binPercentiles = binCenters.map(center => calculatePercentile(center, values));\r\n\r\n        // Function to generate bin labels\r\n        const generateBinLabel = (i) => {\r\n            if (i === 0) {\r\n                return `<= ${binCenters[i].toFixed(2)} (0-${binPercentiles[i].toFixed(2)}%)`;\r\n            } else if (i === effectiveBinSize - 1) {\r\n                return `> ${binCenters[i - 1].toFixed(2)} (${binPercentiles[i - 1].toFixed(2)}-100%)`;\r\n            } else {\r\n                return `> ${binCenters[i - 1].toFixed(2)} (${binPercentiles[i - 1].toFixed(2)}-${binPercentiles[i].toFixed(2)}%)`;\r\n            }\r\n        };\r\n\r\n        const binLabels = binPercentiles.map(generateBinLabel);\r\n    \r\n\r\n        // map data points to the bins\r\n        const bins = Array.from({length: effectiveBinSize}, () => []);\r\n        kmeansResults.clusters.forEach((cluster, i) => {\r\n            if (cluster >=0 && cluster < effectiveBinSize) {\r\n            bins[cluster].push(values[i]);\r\n            }\r\n        });\r\n\r\n        // define y scale\r\n        const y = d3.scaleBand()\r\n            .domain(binLabels)\r\n            .range([height - margin.bottom, margin.top])\r\n            .padding(0.1);\r\n        \r\n        // draw the x axis\r\n        const xAxisG = g => g\r\n        .attr('transform', `translate(0,${height - margin.bottom})`)\r\n        .call(d3.axisBottom(x).ticks(width / 80))\r\n        .call(g => g.select('.domain').remove());\r\n\r\n        // draw the y axis\r\n        const yAxisG = g => g\r\n        .attr('transform', `translate(${margin.left},0)`)\r\n        .call(d3.axisLeft(y))\r\n        .call(g => g.select('.domain').remove());\r\n\r\n        svg.append('g').call(xAxisG);\r\n        svg.append('g').call(yAxisG);\r\n\r\n        // draw the bins\r\n        svg.append('g')\r\n        .selectAll('rect')\r\n        .data(bins.map((bin, i) => ({values: bin, label: binLabels[i]})))\r\n        .join('rect')\r\n        .attr('x', d => x(d3.min(d)))\r\n        .attr('y', (d, i) => y(i))\r\n        .attr('width', d => x(d3.max(d)) - x(d3.min(d)))\r\n        .attr('height', y.bandwidth())\r\n        .attr('fill', 'steelblue');\r\n\r\n        svg.append('g')\r\n        .selectAll('text')\r\n        .data(bins.map((bin, i) => ({values: bin, label: binLabels[i]})))\r\n        .join('text')\r\n        .attr('x', d => x(d3.min(d.values)) + 5)\r\n        .attr('y', d => y(d.label) + y.bandwidth() / 2)\r\n        .attr('dy', '0.35em')\r\n        .text(d => d.label)\r\n        .attr('fill', 'white')\r\n        .attr('font-size', '12px');\r\n\r\n    }\r\n\r\n    return (\r\n    <div>\r\n        <div className='bg-blue-100 w-1/2 text-sm'>\r\n            <svg ref={svgRef} width={300} height={300}></svg>\r\n\r\n            <label htmlFor=\"xAxis\">X Axis:</label>\r\n            <select id=\"xAxis\" value={xAxis} onChange={handleXAxisChange}>\r\n                {data[0] && Object.keys(data[0]).map(key => (\r\n                    <option key={key} value={key}>{key}</option>\r\n                ))}\r\n            </select>\r\n            <label>\r\n                Bin Size:\r\n                <input type=\"number\" value={binSize} onChange={handleBinSizeChange} />\r\n            </label>\r\n        </div>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default BinPlot;\r\n\r\n\r\n      \r\n        "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}