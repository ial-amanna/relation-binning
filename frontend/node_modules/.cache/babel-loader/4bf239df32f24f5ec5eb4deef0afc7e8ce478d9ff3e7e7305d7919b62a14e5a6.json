{"ast":null,"code":"var _jsxFileName = \"C:\\\\ra_work\\\\relation-binning\\\\src\\\\components\\\\BinPlot.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BinPlot = ({\n  data\n}) => {\n  _s();\n  const svgRef = useRef();\n  const [yAxis1, setYAxis1] = useState(\"\");\n  const [yAxis2, setYAxis2] = useState(\"\");\n  const [maxBins, setMaxBins] = useState(5); // Maximum number of bins\n  const [selectedLeftBin, setSelectedLeftBin] = useState(null);\n  const [selectedRightBin, setSelectedRightBin] = useState(null);\n  const handleYAxis1Change = event => {\n    setYAxis1(event.target.value);\n  };\n  const handleYAxis2Change = event => {\n    setYAxis2(event.target.value);\n  };\n  const handleMaxBinsChange = event => {\n    const value = Math.max(1, Math.min(10, +event.target.value));\n    setMaxBins(value);\n  };\n  const handleLeftBinClick = binIndex => {\n    setSelectedLeftBin(binIndex);\n    console.log(\"Left bin clicked: \", binIndex);\n  };\n  const handleRightBinClick = binIndex => {\n    setSelectedRightBin(binIndex);\n    console.log(\"Right bin clicked: \", binIndex);\n  };\n  useEffect(() => {\n    if (data.length > 0) {\n      if (!yAxis1) {\n        setYAxis1(Object.keys(data[0])[0]);\n      }\n      if (!yAxis2) {\n        setYAxis2(Object.keys(data[0])[1]); // Initialize yAxis2 with another attribute\n      }\n      drawBinPlot();\n    }\n  }, [data, yAxis1, yAxis2, maxBins]);\n  const drawBinPlot = () => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove();\n    const width = 600;\n    const height = 400;\n    const margin = {\n      top: 20,\n      right: 50,\n      bottom: 50,\n      left: 50\n    };\n    const barWidth = 15;\n    const barSpacing = 20; // Space between sets of bins\n    const binGap = 2; // Gap between bins in the same set\n\n    const filteredData = data.filter(d => d[yAxis1] != null && d[yAxis2] != null);\n    if (filteredData.length === 0) {\n      console.log('No valid data points for plotting');\n      return;\n    }\n    const y1 = d3.scaleLinear().domain(d3.extent(filteredData, d => +d[yAxis1])).nice().range([height - margin.bottom, margin.top]);\n    const y2 = d3.scaleLinear().domain(d3.extent(filteredData, d => +d[yAxis2])).nice().range([height - margin.bottom, margin.top]);\n    const xLeft = d3.scaleLinear().domain([1, maxBins]).range([margin.left, width / 2 - barSpacing]);\n    const xRight = d3.scaleLinear().domain([1, maxBins]).range([width - margin.right - barSpacing, width / 2 + barSpacing]);\n    const maxBinsClamped = Math.max(1, Math.min(10, maxBins));\n    const colorScaleLeft = d3.scaleLinear().domain([1, maxBinsClamped]).range(['orange', 'darkorange']);\n    const colorScaleRight = d3.scaleLinear().domain([1, maxBinsClamped]).range(['steelblue', 'darkblue']);\n\n    // Draw bars for the left attribute (y1)\n    for (let i = 1; i <= maxBinsClamped; i++) {\n      const barHeight = (height - margin.bottom - margin.top - (i - 1) * binGap) / i;\n      for (let j = 0; j < i; j++) {\n        svg.append('rect').attr('x', xLeft(i) - barWidth / 2).attr('y', margin.top + j * (barHeight + binGap)).attr('width', barWidth).attr('height', barHeight).attr('fill', colorScaleLeft(i)).attr('opacity', 0.8).on(\"click\", () => handleLeftBinClick(i * 10 + j)); // Handle left bin click\n      }\n    }\n\n    // Draw bars for the right attribute (y2)\n    for (let i = 1; i <= maxBinsClamped; i++) {\n      const barHeight = (height - margin.bottom - margin.top - (i - 1) * binGap) / i;\n      for (let j = 0; j < i; j++) {\n        svg.append('rect').attr('x', xRight(i) - barWidth / 2) // Reverse order\n        .attr('y', margin.top + j * (barHeight + binGap)).attr('width', barWidth).attr('height', barHeight).attr('fill', colorScaleRight(i)).attr('opacity', 0.8).on(\"click\", () => handleRightBinClick(i * 10 + j)); // Handle left bin click\n      }\n    }\n\n    // Draw y1 and y2 axes\n    svg.append('g').attr('transform', `translate(${margin.left},0)`).call(d3.axisLeft(y1));\n    svg.append('g').attr('transform', `translate(${width - margin.right},0)`).call(d3.axisRight(y2));\n\n    // If both bins are selected, map the values\n    if (selectedLeftBin !== null && selectedRightBin !== null) {\n      // Logic to draw lines or connections between corresponding values\n      const leftBinData = filteredData.filter(d => Math.floor(y1(d[yAxis1]) / (height / maxBinsClamped)) === selectedLeftBin - 1);\n      const rightBinData = filteredData.filter(d => Math.floor(y2(d[yAxis2]) / (height / maxBinsClamped)) === selectedRightBin - 1);\n      leftBinData.forEach((leftDatum, idx) => {\n        const rightDatum = rightBinData[idx];\n        if (rightDatum) {\n          svg.append('path').attr('d', d3.line().curve(d3.curveBasis).x(function (d) {\n            return d.x;\n          }).y(function (d) {\n            return d.y;\n          })([{\n            x: xLeft(selectedLeftBin),\n            y: y1(leftDatum[yAxis1])\n          }, {\n            x: (xLeft(selectedLeftBin) + xRight(selectedRightBin)) / 2,\n            y: (y1(leftDatum[yAxis1]) + y2(rightDatum[yAxis2])) / 2\n          }, {\n            x: xRight(selectedRightBin),\n            y: y2(rightDatum[yAxis2])\n          }])).attr('fill', 'none').attr('stroke', 'green').attr('stroke-width', 2).attr('opacity', 0.5);\n        }\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-blue-100 w-1/2 text-sm\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        width: 600,\n        height: 400\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"yAxis1\",\n        children: \"Y Axis 1:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"yAxis1\",\n        value: yAxis1,\n        onChange: handleYAxis1Change,\n        children: data[0] && Object.keys(data[0]).map(key => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: key,\n          children: key\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"yAxis2\",\n        children: \"Y Axis 2:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"yAxis2\",\n        value: yAxis2,\n        onChange: handleYAxis2Change,\n        children: data[0] && Object.keys(data[0]).map(key => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: key,\n          children: key\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Max Bins:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: maxBins,\n          onChange: handleMaxBinsChange,\n          min: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 9\n  }, this);\n};\n_s(BinPlot, \"v6p0qrzqt12jlrRFuM3GsDT/ON4=\");\n_c = BinPlot;\nexport default BinPlot;\nvar _c;\n$RefreshReg$(_c, \"BinPlot\");","map":{"version":3,"names":["React","useRef","useEffect","useState","d3","jsxDEV","_jsxDEV","BinPlot","data","_s","svgRef","yAxis1","setYAxis1","yAxis2","setYAxis2","maxBins","setMaxBins","selectedLeftBin","setSelectedLeftBin","selectedRightBin","setSelectedRightBin","handleYAxis1Change","event","target","value","handleYAxis2Change","handleMaxBinsChange","Math","max","min","handleLeftBinClick","binIndex","console","log","handleRightBinClick","length","Object","keys","drawBinPlot","svg","select","current","selectAll","remove","width","height","margin","top","right","bottom","left","barWidth","barSpacing","binGap","filteredData","filter","d","y1","scaleLinear","domain","extent","nice","range","y2","xLeft","xRight","maxBinsClamped","colorScaleLeft","colorScaleRight","i","barHeight","j","append","attr","on","call","axisLeft","axisRight","leftBinData","floor","rightBinData","forEach","leftDatum","idx","rightDatum","line","curve","curveBasis","x","y","children","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","map","key","type","_c","$RefreshReg$"],"sources":["C:/ra_work/relation-binning/src/components/BinPlot.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n\r\nconst BinPlot = ({ data }) => {\r\n    const svgRef = useRef();\r\n    const [yAxis1, setYAxis1] = useState(\"\");\r\n    const [yAxis2, setYAxis2] = useState(\"\");\r\n    const [maxBins, setMaxBins] = useState(5); // Maximum number of bins\r\n    const [selectedLeftBin, setSelectedLeftBin] = useState(null);\r\n    const [selectedRightBin, setSelectedRightBin] = useState(null);\r\n    \r\n    const handleYAxis1Change = (event) => {\r\n        setYAxis1(event.target.value);\r\n    };\r\n\r\n    const handleYAxis2Change = (event) => {\r\n        setYAxis2(event.target.value);\r\n    };\r\n    const handleMaxBinsChange = (event) => {\r\n        const value = Math.max(1, Math.min(10, +event.target.value));\r\n        setMaxBins(value);\r\n    };\r\n\r\n    const handleLeftBinClick = (binIndex) => {\r\n        setSelectedLeftBin(binIndex);\r\n        console.log(\"Left bin clicked: \", binIndex);\r\n    };\r\n    \r\n    const handleRightBinClick = (binIndex) => {\r\n        setSelectedRightBin(binIndex);\r\n        console.log(\"Right bin clicked: \", binIndex);\r\n    };\r\n    \r\n\r\n    useEffect(() => {\r\n        if (data.length > 0) {\r\n            if (!yAxis1) {\r\n                setYAxis1(Object.keys(data[0])[0]);\r\n            }\r\n            if (!yAxis2) {\r\n                setYAxis2(Object.keys(data[0])[1]); // Initialize yAxis2 with another attribute\r\n            }\r\n            drawBinPlot();\r\n        }\r\n    }, [data, yAxis1, yAxis2, maxBins]);\r\n\r\n\r\n\r\n\r\n    const drawBinPlot = () => {\r\n        const svg = d3.select(svgRef.current);\r\n        svg.selectAll('*').remove();\r\n    \r\n        const width = 600;\r\n        const height = 400;\r\n        const margin = { top: 20, right: 50, bottom: 50, left: 50 };\r\n        const barWidth = 15;\r\n        const barSpacing = 20;  // Space between sets of bins\r\n        const binGap = 2;       // Gap between bins in the same set\r\n    \r\n        const filteredData = data.filter(d => d[yAxis1] != null && d[yAxis2] != null);\r\n    \r\n        if (filteredData.length === 0) {\r\n            console.log('No valid data points for plotting');\r\n            return;\r\n        }\r\n    \r\n        const y1 = d3.scaleLinear()\r\n            .domain(d3.extent(filteredData, d => +d[yAxis1])).nice()\r\n            .range([height - margin.bottom, margin.top]);\r\n    \r\n        const y2 = d3.scaleLinear()\r\n            .domain(d3.extent(filteredData, d => +d[yAxis2])).nice()\r\n            .range([height - margin.bottom, margin.top]);\r\n    \r\n        const xLeft = d3.scaleLinear()\r\n            .domain([1, maxBins])\r\n            .range([margin.left, width / 2 - barSpacing]);\r\n    \r\n        const xRight = d3.scaleLinear()\r\n            .domain([1, maxBins])\r\n            .range([width - margin.right - barSpacing, width / 2 + barSpacing]);\r\n            \r\n        const maxBinsClamped = Math.max(1, Math.min(10, maxBins));\r\n    \r\n        const colorScaleLeft = d3.scaleLinear()\r\n            .domain([1, maxBinsClamped])\r\n            .range(['orange', 'darkorange']);\r\n    \r\n        const colorScaleRight = d3.scaleLinear()\r\n            .domain([1, maxBinsClamped])\r\n            .range(['steelblue', 'darkblue']);\r\n    \r\n        // Draw bars for the left attribute (y1)\r\n        for (let i = 1; i <= maxBinsClamped; i++) {\r\n            const barHeight = (height - margin.bottom - margin.top - (i - 1) * binGap) / i;\r\n            for (let j = 0; j < i; j++) {\r\n                svg.append('rect')\r\n                    .attr('x', xLeft(i) - barWidth / 2)\r\n                    .attr('y', margin.top + j * (barHeight + binGap))\r\n                    .attr('width', barWidth)\r\n                    .attr('height', barHeight)\r\n                    .attr('fill', colorScaleLeft(i))\r\n                    .attr('opacity', 0.8)\r\n                    .on(\"click\", () => handleLeftBinClick(i*10+j));  // Handle left bin click\r\n            }\r\n        }\r\n    \r\n        // Draw bars for the right attribute (y2)\r\n        for (let i = 1; i <= maxBinsClamped; i++) {\r\n            const barHeight = (height - margin.bottom - margin.top - (i - 1) * binGap) / i;\r\n            for (let j = 0; j < i; j++) {\r\n                svg.append('rect')\r\n                .attr('x', xRight(i) - barWidth / 2) // Reverse order\r\n                .attr('y', margin.top + j * (barHeight + binGap))\r\n                .attr('width', barWidth)\r\n                .attr('height', barHeight)\r\n                .attr('fill', colorScaleRight(i))\r\n                .attr('opacity', 0.8)\r\n                .on(\"click\", () => handleRightBinClick(i*10+j));  // Handle left bin click\r\n\r\n            }\r\n        }\r\n    \r\n        // Draw y1 and y2 axes\r\n        svg.append('g')\r\n            .attr('transform', `translate(${margin.left},0)`)\r\n            .call(d3.axisLeft(y1));\r\n    \r\n        svg.append('g')\r\n            .attr('transform', `translate(${width - margin.right},0)`)\r\n            .call(d3.axisRight(y2));\r\n        \r\n            \r\n        // If both bins are selected, map the values\r\n        if (selectedLeftBin !== null && selectedRightBin !== null) {\r\n            // Logic to draw lines or connections between corresponding values\r\n            const leftBinData = filteredData.filter(d => Math.floor(y1(d[yAxis1]) / (height / maxBinsClamped)) === selectedLeftBin - 1);\r\n            const rightBinData = filteredData.filter(d => Math.floor(y2(d[yAxis2]) / (height / maxBinsClamped)) === selectedRightBin - 1);\r\n            leftBinData.forEach((leftDatum, idx) => {\r\n                const rightDatum = rightBinData[idx];\r\n                if (rightDatum) {\r\n                    svg.append('path')\r\n                        .attr('d', d3.line()\r\n                        .curve(d3.curveBasis)\r\n                        .x(function(d) {return d.x;})\r\n                        .y(function(d) {return d.y;})\r\n                        ([\r\n                            {x: xLeft(selectedLeftBin), y: y1(leftDatum[yAxis1])},\r\n                            {x: (xLeft(selectedLeftBin) + xRight(selectedRightBin)) / 2, y: (y1(leftDatum[yAxis1]) + y2(rightDatum[yAxis2])) / 2},\r\n                            {x: xRight(selectedRightBin), y: y2(rightDatum[yAxis2])}\r\n                        ]))\r\n                        .attr('fill', 'none')\r\n                        .attr('stroke', 'green')\r\n                        .attr('stroke-width', 2)\r\n                        .attr('opacity', 0.5);\r\n                                    }\r\n            });\r\n        }   \r\n    };  \r\n\r\n\r\n\r\n        \r\n    return (\r\n        <div>\r\n            <div className='bg-blue-100 w-1/2 text-sm'>\r\n                <svg ref={svgRef} width={600} height={400}></svg> {/* Adjusted SVG size */}\r\n    \r\n                <label htmlFor=\"yAxis1\">Y Axis 1:</label>\r\n                <select id=\"yAxis1\" value={yAxis1} onChange={handleYAxis1Change}>\r\n                    {data[0] && Object.keys(data[0]).map(key => (\r\n                        <option key={key} value={key}>{key}</option>\r\n                    ))}\r\n                </select>\r\n    \r\n                <label htmlFor=\"yAxis2\">Y Axis 2:</label>\r\n                <select id=\"yAxis2\" value={yAxis2} onChange={handleYAxis2Change}>\r\n                    {data[0] && Object.keys(data[0]).map(key => (\r\n                        <option key={key} value={key}>{key}</option>\r\n                    ))}\r\n                </select>\r\n    \r\n                <label>\r\n                    Max Bins:\r\n                    <input type=\"number\" value={maxBins} onChange={handleMaxBinsChange} min=\"1\" />\r\n                </label>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default BinPlot;\r\n\r\n      \r\n        "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGzB,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC1B,MAAMC,MAAM,GAAGT,MAAM,CAAC,CAAC;EACvB,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACc,eAAe,EAAEC,kBAAkB,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACgB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAE9D,MAAMkB,kBAAkB,GAAIC,KAAK,IAAK;IAClCV,SAAS,CAACU,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACjC,CAAC;EAED,MAAMC,kBAAkB,GAAIH,KAAK,IAAK;IAClCR,SAAS,CAACQ,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACjC,CAAC;EACD,MAAME,mBAAmB,GAAIJ,KAAK,IAAK;IACnC,MAAME,KAAK,GAAGG,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,EAAE,EAAE,CAACP,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC;IAC5DR,UAAU,CAACQ,KAAK,CAAC;EACrB,CAAC;EAED,MAAMM,kBAAkB,GAAIC,QAAQ,IAAK;IACrCb,kBAAkB,CAACa,QAAQ,CAAC;IAC5BC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,QAAQ,CAAC;EAC/C,CAAC;EAED,MAAMG,mBAAmB,GAAIH,QAAQ,IAAK;IACtCX,mBAAmB,CAACW,QAAQ,CAAC;IAC7BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEF,QAAQ,CAAC;EAChD,CAAC;EAGD7B,SAAS,CAAC,MAAM;IACZ,IAAIM,IAAI,CAAC2B,MAAM,GAAG,CAAC,EAAE;MACjB,IAAI,CAACxB,MAAM,EAAE;QACTC,SAAS,CAACwB,MAAM,CAACC,IAAI,CAAC7B,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACtC;MACA,IAAI,CAACK,MAAM,EAAE;QACTC,SAAS,CAACsB,MAAM,CAACC,IAAI,CAAC7B,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACxC;MACA8B,WAAW,CAAC,CAAC;IACjB;EACJ,CAAC,EAAE,CAAC9B,IAAI,EAAEG,MAAM,EAAEE,MAAM,EAAEE,OAAO,CAAC,CAAC;EAKnC,MAAMuB,WAAW,GAAGA,CAAA,KAAM;IACtB,MAAMC,GAAG,GAAGnC,EAAE,CAACoC,MAAM,CAAC9B,MAAM,CAAC+B,OAAO,CAAC;IACrCF,GAAG,CAACG,SAAS,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC;IAE3B,MAAMC,KAAK,GAAG,GAAG;IACjB,MAAMC,MAAM,GAAG,GAAG;IAClB,MAAMC,MAAM,GAAG;MAAEC,GAAG,EAAE,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,MAAM,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAG,CAAC;IAC3D,MAAMC,QAAQ,GAAG,EAAE;IACnB,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAE;IACxB,MAAMC,MAAM,GAAG,CAAC,CAAC,CAAO;;IAExB,MAAMC,YAAY,GAAG9C,IAAI,CAAC+C,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAC7C,MAAM,CAAC,IAAI,IAAI,IAAI6C,CAAC,CAAC3C,MAAM,CAAC,IAAI,IAAI,CAAC;IAE7E,IAAIyC,YAAY,CAACnB,MAAM,KAAK,CAAC,EAAE;MAC3BH,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAChD;IACJ;IAEA,MAAMwB,EAAE,GAAGrD,EAAE,CAACsD,WAAW,CAAC,CAAC,CACtBC,MAAM,CAACvD,EAAE,CAACwD,MAAM,CAACN,YAAY,EAAEE,CAAC,IAAI,CAACA,CAAC,CAAC7C,MAAM,CAAC,CAAC,CAAC,CAACkD,IAAI,CAAC,CAAC,CACvDC,KAAK,CAAC,CAACjB,MAAM,GAAGC,MAAM,CAACG,MAAM,EAAEH,MAAM,CAACC,GAAG,CAAC,CAAC;IAEhD,MAAMgB,EAAE,GAAG3D,EAAE,CAACsD,WAAW,CAAC,CAAC,CACtBC,MAAM,CAACvD,EAAE,CAACwD,MAAM,CAACN,YAAY,EAAEE,CAAC,IAAI,CAACA,CAAC,CAAC3C,MAAM,CAAC,CAAC,CAAC,CAACgD,IAAI,CAAC,CAAC,CACvDC,KAAK,CAAC,CAACjB,MAAM,GAAGC,MAAM,CAACG,MAAM,EAAEH,MAAM,CAACC,GAAG,CAAC,CAAC;IAEhD,MAAMiB,KAAK,GAAG5D,EAAE,CAACsD,WAAW,CAAC,CAAC,CACzBC,MAAM,CAAC,CAAC,CAAC,EAAE5C,OAAO,CAAC,CAAC,CACpB+C,KAAK,CAAC,CAAChB,MAAM,CAACI,IAAI,EAAEN,KAAK,GAAG,CAAC,GAAGQ,UAAU,CAAC,CAAC;IAEjD,MAAMa,MAAM,GAAG7D,EAAE,CAACsD,WAAW,CAAC,CAAC,CAC1BC,MAAM,CAAC,CAAC,CAAC,EAAE5C,OAAO,CAAC,CAAC,CACpB+C,KAAK,CAAC,CAAClB,KAAK,GAAGE,MAAM,CAACE,KAAK,GAAGI,UAAU,EAAER,KAAK,GAAG,CAAC,GAAGQ,UAAU,CAAC,CAAC;IAEvE,MAAMc,cAAc,GAAGvC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,EAAE,EAAEd,OAAO,CAAC,CAAC;IAEzD,MAAMoD,cAAc,GAAG/D,EAAE,CAACsD,WAAW,CAAC,CAAC,CAClCC,MAAM,CAAC,CAAC,CAAC,EAAEO,cAAc,CAAC,CAAC,CAC3BJ,KAAK,CAAC,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;IAEpC,MAAMM,eAAe,GAAGhE,EAAE,CAACsD,WAAW,CAAC,CAAC,CACnCC,MAAM,CAAC,CAAC,CAAC,EAAEO,cAAc,CAAC,CAAC,CAC3BJ,KAAK,CAAC,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;;IAErC;IACA,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIH,cAAc,EAAEG,CAAC,EAAE,EAAE;MACtC,MAAMC,SAAS,GAAG,CAACzB,MAAM,GAAGC,MAAM,CAACG,MAAM,GAAGH,MAAM,CAACC,GAAG,GAAG,CAACsB,CAAC,GAAG,CAAC,IAAIhB,MAAM,IAAIgB,CAAC;MAC9E,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,EAAEE,CAAC,EAAE,EAAE;QACxBhC,GAAG,CAACiC,MAAM,CAAC,MAAM,CAAC,CACbC,IAAI,CAAC,GAAG,EAAET,KAAK,CAACK,CAAC,CAAC,GAAGlB,QAAQ,GAAG,CAAC,CAAC,CAClCsB,IAAI,CAAC,GAAG,EAAE3B,MAAM,CAACC,GAAG,GAAGwB,CAAC,IAAID,SAAS,GAAGjB,MAAM,CAAC,CAAC,CAChDoB,IAAI,CAAC,OAAO,EAAEtB,QAAQ,CAAC,CACvBsB,IAAI,CAAC,QAAQ,EAAEH,SAAS,CAAC,CACzBG,IAAI,CAAC,MAAM,EAAEN,cAAc,CAACE,CAAC,CAAC,CAAC,CAC/BI,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,CACpBC,EAAE,CAAC,OAAO,EAAE,MAAM5C,kBAAkB,CAACuC,CAAC,GAAC,EAAE,GAACE,CAAC,CAAC,CAAC,CAAC,CAAE;MACzD;IACJ;;IAEA;IACA,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIH,cAAc,EAAEG,CAAC,EAAE,EAAE;MACtC,MAAMC,SAAS,GAAG,CAACzB,MAAM,GAAGC,MAAM,CAACG,MAAM,GAAGH,MAAM,CAACC,GAAG,GAAG,CAACsB,CAAC,GAAG,CAAC,IAAIhB,MAAM,IAAIgB,CAAC;MAC9E,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,EAAEE,CAAC,EAAE,EAAE;QACxBhC,GAAG,CAACiC,MAAM,CAAC,MAAM,CAAC,CACjBC,IAAI,CAAC,GAAG,EAAER,MAAM,CAACI,CAAC,CAAC,GAAGlB,QAAQ,GAAG,CAAC,CAAC,CAAC;QAAA,CACpCsB,IAAI,CAAC,GAAG,EAAE3B,MAAM,CAACC,GAAG,GAAGwB,CAAC,IAAID,SAAS,GAAGjB,MAAM,CAAC,CAAC,CAChDoB,IAAI,CAAC,OAAO,EAAEtB,QAAQ,CAAC,CACvBsB,IAAI,CAAC,QAAQ,EAAEH,SAAS,CAAC,CACzBG,IAAI,CAAC,MAAM,EAAEL,eAAe,CAACC,CAAC,CAAC,CAAC,CAChCI,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,CACpBC,EAAE,CAAC,OAAO,EAAE,MAAMxC,mBAAmB,CAACmC,CAAC,GAAC,EAAE,GAACE,CAAC,CAAC,CAAC,CAAC,CAAE;MAEtD;IACJ;;IAEA;IACAhC,GAAG,CAACiC,MAAM,CAAC,GAAG,CAAC,CACVC,IAAI,CAAC,WAAW,EAAE,aAAa3B,MAAM,CAACI,IAAI,KAAK,CAAC,CAChDyB,IAAI,CAACvE,EAAE,CAACwE,QAAQ,CAACnB,EAAE,CAAC,CAAC;IAE1BlB,GAAG,CAACiC,MAAM,CAAC,GAAG,CAAC,CACVC,IAAI,CAAC,WAAW,EAAE,aAAa7B,KAAK,GAAGE,MAAM,CAACE,KAAK,KAAK,CAAC,CACzD2B,IAAI,CAACvE,EAAE,CAACyE,SAAS,CAACd,EAAE,CAAC,CAAC;;IAG3B;IACA,IAAI9C,eAAe,KAAK,IAAI,IAAIE,gBAAgB,KAAK,IAAI,EAAE;MACvD;MACA,MAAM2D,WAAW,GAAGxB,YAAY,CAACC,MAAM,CAACC,CAAC,IAAI7B,IAAI,CAACoD,KAAK,CAACtB,EAAE,CAACD,CAAC,CAAC7C,MAAM,CAAC,CAAC,IAAIkC,MAAM,GAAGqB,cAAc,CAAC,CAAC,KAAKjD,eAAe,GAAG,CAAC,CAAC;MAC3H,MAAM+D,YAAY,GAAG1B,YAAY,CAACC,MAAM,CAACC,CAAC,IAAI7B,IAAI,CAACoD,KAAK,CAAChB,EAAE,CAACP,CAAC,CAAC3C,MAAM,CAAC,CAAC,IAAIgC,MAAM,GAAGqB,cAAc,CAAC,CAAC,KAAK/C,gBAAgB,GAAG,CAAC,CAAC;MAC7H2D,WAAW,CAACG,OAAO,CAAC,CAACC,SAAS,EAAEC,GAAG,KAAK;QACpC,MAAMC,UAAU,GAAGJ,YAAY,CAACG,GAAG,CAAC;QACpC,IAAIC,UAAU,EAAE;UACZ7C,GAAG,CAACiC,MAAM,CAAC,MAAM,CAAC,CACbC,IAAI,CAAC,GAAG,EAAErE,EAAE,CAACiF,IAAI,CAAC,CAAC,CACnBC,KAAK,CAAClF,EAAE,CAACmF,UAAU,CAAC,CACpBC,CAAC,CAAC,UAAShC,CAAC,EAAE;YAAC,OAAOA,CAAC,CAACgC,CAAC;UAAC,CAAC,CAAC,CAC5BC,CAAC,CAAC,UAASjC,CAAC,EAAE;YAAC,OAAOA,CAAC,CAACiC,CAAC;UAAC,CAAC,CAAC,CAC5B,CACG;YAACD,CAAC,EAAExB,KAAK,CAAC/C,eAAe,CAAC;YAAEwE,CAAC,EAAEhC,EAAE,CAACyB,SAAS,CAACvE,MAAM,CAAC;UAAC,CAAC,EACrD;YAAC6E,CAAC,EAAE,CAACxB,KAAK,CAAC/C,eAAe,CAAC,GAAGgD,MAAM,CAAC9C,gBAAgB,CAAC,IAAI,CAAC;YAAEsE,CAAC,EAAE,CAAChC,EAAE,CAACyB,SAAS,CAACvE,MAAM,CAAC,CAAC,GAAGoD,EAAE,CAACqB,UAAU,CAACvE,MAAM,CAAC,CAAC,IAAI;UAAC,CAAC,EACrH;YAAC2E,CAAC,EAAEvB,MAAM,CAAC9C,gBAAgB,CAAC;YAAEsE,CAAC,EAAE1B,EAAE,CAACqB,UAAU,CAACvE,MAAM,CAAC;UAAC,CAAC,CAC3D,CAAC,CAAC,CACF4D,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CACpBA,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBA,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC;QACT;MACxB,CAAC,CAAC;IACN;EACJ,CAAC;EAKD,oBACInE,OAAA;IAAAoF,QAAA,eACIpF,OAAA;MAAKqF,SAAS,EAAC,2BAA2B;MAAAD,QAAA,gBACtCpF,OAAA;QAAKsF,GAAG,EAAElF,MAAO;QAACkC,KAAK,EAAE,GAAI;QAACC,MAAM,EAAE;MAAI;QAAAgD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,KAAC,eAElD1F,OAAA;QAAO2F,OAAO,EAAC,QAAQ;QAAAP,QAAA,EAAC;MAAS;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACzC1F,OAAA;QAAQ4F,EAAE,EAAC,QAAQ;QAAC1E,KAAK,EAAEb,MAAO;QAACwF,QAAQ,EAAE9E,kBAAmB;QAAAqE,QAAA,EAC3DlF,IAAI,CAAC,CAAC,CAAC,IAAI4B,MAAM,CAACC,IAAI,CAAC7B,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC4F,GAAG,CAACC,GAAG,iBACpC/F,OAAA;UAAkBkB,KAAK,EAAE6E,GAAI;UAAAX,QAAA,EAAEW;QAAG,GAArBA,GAAG;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA2B,CAC9C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eAET1F,OAAA;QAAO2F,OAAO,EAAC,QAAQ;QAAAP,QAAA,EAAC;MAAS;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACzC1F,OAAA;QAAQ4F,EAAE,EAAC,QAAQ;QAAC1E,KAAK,EAAEX,MAAO;QAACsF,QAAQ,EAAE1E,kBAAmB;QAAAiE,QAAA,EAC3DlF,IAAI,CAAC,CAAC,CAAC,IAAI4B,MAAM,CAACC,IAAI,CAAC7B,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC4F,GAAG,CAACC,GAAG,iBACpC/F,OAAA;UAAkBkB,KAAK,EAAE6E,GAAI;UAAAX,QAAA,EAAEW;QAAG,GAArBA,GAAG;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA2B,CAC9C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eAET1F,OAAA;QAAAoF,QAAA,GAAO,WAEH,eAAApF,OAAA;UAAOgG,IAAI,EAAC,QAAQ;UAAC9E,KAAK,EAAET,OAAQ;UAACoF,QAAQ,EAAEzE,mBAAoB;UAACG,GAAG,EAAC;QAAG;UAAAgE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3E,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAAvF,EAAA,CA3LKF,OAAO;AAAAgG,EAAA,GAAPhG,OAAO;AA4Lb,eAAeA,OAAO;AAAC,IAAAgG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}