{"ast":null,"code":"var _jsxFileName = \"C:\\\\ra_work\\\\relation-discovery-starter\\\\src\\\\components\\\\BinPlot.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\n// const { kmeans } = require('../ml-kmeans');\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  kmeans\n} = require('ml-kmeans');\nconst BinPlot = ({\n  data\n}) => {\n  _s();\n  const svgRef = useRef();\n  const [xAxis, setXAxis] = useState(\"\");\n  const [binSize, setBinSize] = useState(\"1\");\n  const handleXAxisChange = event => {\n    setXAxis(event.target.value);\n  };\n  const handleBinSizeChange = event => {\n    setBinSize(event.target.value);\n  };\n  useEffect(() => {\n    if (data.length > 0) {\n      if (!xAxis) {\n        setXAxis(Object.keys(data[0])[0]);\n      }\n      drawBinPlot();\n    }\n  }, [data, xAxis, binSize]);\n  const renameClusters = (values, centroids, clusters) => {\n    const sortedCentroids = centroids.map((centroid, index) => ({\n      value: centroid.centroid,\n      originalIndex: index\n    })).sort((a, b) => a.value - b.value);\n    const indexToNewName = {};\n    sortedCentroids.forEach((centroid, index) => {\n      indexToNewName[centroid.originalIndex] = `Bin ${index + 1}/${centroids.length}`;\n    });\n    const renamedClusters = clusters.map(cluster => indexToNewName[cluster]);\n    return renamedClusters;\n  };\n  const drawBinPlot = () => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove();\n\n    // define width and height of the plot\n    const width = 300;\n    const height = 300;\n    const margin = {\n      top: 20,\n      right: 50,\n      bottom: 50,\n      left: 50\n    };\n\n    // define x scale\n    const x = d3.scaleLinear().domain(d3.extent(data, d => +d[xAxis])).nice().range([margin.left, width - margin.right]);\n\n    // apply k-means clustering to the data, remove NaN values\n    const values = data.map(d => +d[xAxis]).filter(d => !isNaN(d));\n    if (values.length === 0) {\n      console.log('No valid data points for binning');\n      return;\n    }\n    const uniqueValues = new Set(values);\n    const effectiveBinSize = Math.min(+binSize, uniqueValues.size);\n    const kmeansResults = kmeans(values.map(d => [d]), effectiveBinSize);\n    // console.log(kmeansResults);\n\n    // map data points to the bins\n    const bins = Array.from({\n      length: effectiveBinSize\n    }, () => []);\n    kmeansResults.clusters.forEach((cluster, i) => {\n      if (cluster >= 0 && cluster < effectiveBinSize) {\n        bins[cluster].push(values[i]);\n      }\n    });\n    const renamedBins = renameClusters(values, kmeansResults.centroids, kmeansResults.clusters);\n\n    // renamedClusters.forEach((binName, i) => {\n    //     bins[parseInt(binName.split('/')[0].split(' ')[1]) - 1].push(values[i]);\n    // });\n\n    // const uniqueBinNames = [...new Set(renamedClusters)].sort((a, b) => {\n    //     return parseInt(a.split('/')[0].split(' ')[1]) - parseInt(b.split('/')[0].split(' ')[1]);\n    // });\n\n    // define y scale\n    const y = d3.scaleBand().domain(d3.range(effectiveBinSize)).range([height - margin.bottom, margin.top]).padding(0.1);\n\n    // draw the x axis\n    const xAxisG = g => g.attr('transform', `translate(0,${height - margin.bottom})`).call(d3.axisBottom(x).ticks(width / 80)).call(g => g.select('.domain').remove());\n\n    // draw the y axis\n    const yAxisG = g => g.attr('transform', `translate(${margin.left},0)`).call(d3.axisLeft(y).tickFormat(i => `${renamedBins[i]}`)).call(g => g.select('.domain').remove());\n    svg.append('g').call(xAxisG);\n    svg.append('g').call(yAxisG);\n\n    // draw the bins\n    svg.append('g').selectAll('rect').data(bins).join('rect').attr('x', d => x(d3.min(d))).attr('y', (d, i) => y(i)).attr('width', d => x(d3.max(d)) - x(d3.min(d))).attr('height', y.bandwidth()).attr('fill', 'orange');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-blue-100 w-1/2 text-sm\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        width: 300,\n        height: 300\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"xAxis\",\n        children: \"X Axis:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"xAxis\",\n        value: xAxis,\n        onChange: handleXAxisChange,\n        children: data[0] && Object.keys(data[0]).map(key => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: key,\n          children: key\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Bin Size:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: binSize,\n          onChange: handleBinSizeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(BinPlot, \"ZmnBOQy5EtzYyUGbykvfq3o7QHU=\");\n_c = BinPlot;\nexport default BinPlot;\nvar _c;\n$RefreshReg$(_c, \"BinPlot\");","map":{"version":3,"names":["React","useRef","useEffect","useState","d3","jsxDEV","_jsxDEV","kmeans","require","BinPlot","data","_s","svgRef","xAxis","setXAxis","binSize","setBinSize","handleXAxisChange","event","target","value","handleBinSizeChange","length","Object","keys","drawBinPlot","renameClusters","values","centroids","clusters","sortedCentroids","map","centroid","index","originalIndex","sort","a","b","indexToNewName","forEach","renamedClusters","cluster","svg","select","current","selectAll","remove","width","height","margin","top","right","bottom","left","x","scaleLinear","domain","extent","d","nice","range","filter","isNaN","console","log","uniqueValues","Set","effectiveBinSize","Math","min","size","kmeansResults","bins","Array","from","i","push","renamedBins","y","scaleBand","padding","xAxisG","g","attr","call","axisBottom","ticks","yAxisG","axisLeft","tickFormat","append","join","max","bandwidth","children","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","key","type","_c","$RefreshReg$"],"sources":["C:/ra_work/relation-discovery-starter/src/components/BinPlot.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport * as d3 from 'd3';\r\n// const { kmeans } = require('../ml-kmeans');\r\nconst { kmeans } = require('ml-kmeans');\r\nconst BinPlot = ({data}) => {\r\n    const svgRef = useRef();\r\n    const [xAxis,setXAxis] = useState(\"\");\r\n    const [binSize,setBinSize] = useState(\"1\");\r\n\r\n    const handleXAxisChange = (event) => {\r\n        setXAxis(event.target.value);\r\n    };\r\n\r\n    const handleBinSizeChange = (event) => {\r\n        setBinSize(event.target.value);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        if (data.length > 0) {\r\n            if(!xAxis){\r\n                setXAxis(Object.keys(data[0])[0]);\r\n            }\r\n            drawBinPlot();\r\n        }\r\n    }, [data, xAxis, binSize]);\r\n\r\n\r\n\r\n    const renameClusters = (values, centroids, clusters) => {\r\n        const sortedCentroids = centroids\r\n            .map((centroid, index) => ({value: centroid.centroid, originalIndex: index}))\r\n            .sort((a, b) => a.value - b.value);\r\n        \r\n        const indexToNewName = {};\r\n        sortedCentroids.forEach((centroid, index) => {\r\n            indexToNewName[centroid.originalIndex] = `Bin ${index + 1}/${centroids.length}`;\r\n        });\r\n        const renamedClusters = clusters.map(cluster => indexToNewName[cluster]);\r\n        return renamedClusters;\r\n    };\r\n\r\n        \r\n\r\n    const drawBinPlot = () => {\r\n        const svg = d3.select(svgRef.current);\r\n        svg.selectAll('*').remove();\r\n\r\n        // define width and height of the plot\r\n        const width = 300;\r\n        const height = 300;\r\n        const margin = { top: 20, right: 50, bottom: 50, left: 50 };\r\n\r\n        // define x scale\r\n        const x = d3.scaleLinear()\r\n            .domain(d3.extent(data, d => +d[xAxis])).nice()\r\n            .range([margin.left, width - margin.right]);\r\n\r\n        // apply k-means clustering to the data, remove NaN values\r\n        const values = data.map(d => +d[xAxis]).filter(d => !isNaN(d));\r\n        if (values.length === 0) {\r\n            console.log('No valid data points for binning');\r\n            return;\r\n        }\r\n        const uniqueValues = new Set(values);\r\n        const effectiveBinSize = Math.min(+binSize, uniqueValues.size);\r\n\r\n        const kmeansResults = kmeans(values.map(d => [d]), effectiveBinSize);\r\n        // console.log(kmeansResults);\r\n\r\n    \r\n\r\n        // map data points to the bins\r\n        const bins = Array.from({length: effectiveBinSize}, () => []);\r\n        kmeansResults.clusters.forEach((cluster, i) => {\r\n            if (cluster >=0 && cluster < effectiveBinSize) {\r\n            bins[cluster].push(values[i]);\r\n            }\r\n        });\r\n\r\n        const renamedBins = renameClusters(values, kmeansResults.centroids , kmeansResults.clusters);\r\n\r\n\r\n\r\n        // renamedClusters.forEach((binName, i) => {\r\n        //     bins[parseInt(binName.split('/')[0].split(' ')[1]) - 1].push(values[i]);\r\n        // });\r\n\r\n        // const uniqueBinNames = [...new Set(renamedClusters)].sort((a, b) => {\r\n        //     return parseInt(a.split('/')[0].split(' ')[1]) - parseInt(b.split('/')[0].split(' ')[1]);\r\n        // });\r\n    \r\n\r\n        // define y scale\r\n        const y = d3.scaleBand()\r\n            .domain(d3.range(effectiveBinSize))\r\n            .range([height - margin.bottom, margin.top])\r\n            .padding(0.1);\r\n        \r\n        // draw the x axis\r\n        const xAxisG = g => g\r\n        .attr('transform', `translate(0,${height - margin.bottom})`)\r\n        .call(d3.axisBottom(x).ticks(width / 80))\r\n        .call(g => g.select('.domain').remove());\r\n\r\n        // draw the y axis\r\n        const yAxisG = g => g\r\n        .attr('transform', `translate(${margin.left},0)`)\r\n        .call(d3.axisLeft(y).tickFormat (i => `${renamedBins[i]}`))\r\n        .call(g => g.select('.domain').remove());\r\n\r\n   \r\n\r\n        svg.append('g').call(xAxisG);\r\n        svg.append('g').call(yAxisG);\r\n\r\n        // draw the bins\r\n        svg.append('g')\r\n        .selectAll('rect')\r\n        .data(bins)\r\n        .join('rect')\r\n        .attr('x', d => x(d3.min(d)))\r\n        .attr('y', (d, i) => y(i))\r\n        .attr('width', d => x(d3.max(d)) - x(d3.min(d)))\r\n        .attr('height', y.bandwidth())\r\n        .attr('fill', 'orange');\r\n\r\n    }\r\n\r\n    return (\r\n    <div>\r\n        <div className='bg-blue-100 w-1/2 text-sm'>\r\n            <svg ref={svgRef} width={300} height={300}></svg>\r\n\r\n            <label htmlFor=\"xAxis\">X Axis:</label>\r\n            <select id=\"xAxis\" value={xAxis} onChange={handleXAxisChange}>\r\n                {data[0] && Object.keys(data[0]).map(key => (\r\n                    <option key={key} value={key}>{key}</option>\r\n                ))}\r\n            </select>\r\n            <label>\r\n                Bin Size:\r\n                <input type=\"number\" value={binSize} onChange={handleBinSizeChange} />\r\n            </label>\r\n        </div>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default BinPlot;\r\n\r\n      \r\n        "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,KAAKC,EAAE,MAAM,IAAI;AACxB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAM;EAAEC;AAAO,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AACvC,MAAMC,OAAO,GAAGA,CAAC;EAACC;AAAI,CAAC,KAAK;EAAAC,EAAA;EACxB,MAAMC,MAAM,GAAGX,MAAM,CAAC,CAAC;EACvB,MAAM,CAACY,KAAK,EAACC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACrC,MAAM,CAACY,OAAO,EAACC,UAAU,CAAC,GAAGb,QAAQ,CAAC,GAAG,CAAC;EAE1C,MAAMc,iBAAiB,GAAIC,KAAK,IAAK;IACjCJ,QAAQ,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAChC,CAAC;EAED,MAAMC,mBAAmB,GAAIH,KAAK,IAAK;IACnCF,UAAU,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAClC,CAAC;EAGDlB,SAAS,CAAC,MAAM;IACZ,IAAIQ,IAAI,CAACY,MAAM,GAAG,CAAC,EAAE;MACjB,IAAG,CAACT,KAAK,EAAC;QACNC,QAAQ,CAACS,MAAM,CAACC,IAAI,CAACd,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACrC;MACAe,WAAW,CAAC,CAAC;IACjB;EACJ,CAAC,EAAE,CAACf,IAAI,EAAEG,KAAK,EAAEE,OAAO,CAAC,CAAC;EAI1B,MAAMW,cAAc,GAAGA,CAACC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,KAAK;IACpD,MAAMC,eAAe,GAAGF,SAAS,CAC5BG,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,MAAM;MAACb,KAAK,EAAEY,QAAQ,CAACA,QAAQ;MAAEE,aAAa,EAAED;IAAK,CAAC,CAAC,CAAC,CAC5EE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAAChB,KAAK,GAAGiB,CAAC,CAACjB,KAAK,CAAC;IAEtC,MAAMkB,cAAc,GAAG,CAAC,CAAC;IACzBR,eAAe,CAACS,OAAO,CAAC,CAACP,QAAQ,EAAEC,KAAK,KAAK;MACzCK,cAAc,CAACN,QAAQ,CAACE,aAAa,CAAC,GAAG,OAAOD,KAAK,GAAG,CAAC,IAAIL,SAAS,CAACN,MAAM,EAAE;IACnF,CAAC,CAAC;IACF,MAAMkB,eAAe,GAAGX,QAAQ,CAACE,GAAG,CAACU,OAAO,IAAIH,cAAc,CAACG,OAAO,CAAC,CAAC;IACxE,OAAOD,eAAe;EAC1B,CAAC;EAID,MAAMf,WAAW,GAAGA,CAAA,KAAM;IACtB,MAAMiB,GAAG,GAAGtC,EAAE,CAACuC,MAAM,CAAC/B,MAAM,CAACgC,OAAO,CAAC;IACrCF,GAAG,CAACG,SAAS,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC;;IAE3B;IACA,MAAMC,KAAK,GAAG,GAAG;IACjB,MAAMC,MAAM,GAAG,GAAG;IAClB,MAAMC,MAAM,GAAG;MAAEC,GAAG,EAAE,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,MAAM,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAG,CAAC;;IAE3D;IACA,MAAMC,CAAC,GAAGlD,EAAE,CAACmD,WAAW,CAAC,CAAC,CACrBC,MAAM,CAACpD,EAAE,CAACqD,MAAM,CAAC/C,IAAI,EAAEgD,CAAC,IAAI,CAACA,CAAC,CAAC7C,KAAK,CAAC,CAAC,CAAC,CAAC8C,IAAI,CAAC,CAAC,CAC9CC,KAAK,CAAC,CAACX,MAAM,CAACI,IAAI,EAAEN,KAAK,GAAGE,MAAM,CAACE,KAAK,CAAC,CAAC;;IAE/C;IACA,MAAMxB,MAAM,GAAGjB,IAAI,CAACqB,GAAG,CAAC2B,CAAC,IAAI,CAACA,CAAC,CAAC7C,KAAK,CAAC,CAAC,CAACgD,MAAM,CAACH,CAAC,IAAI,CAACI,KAAK,CAACJ,CAAC,CAAC,CAAC;IAC9D,IAAI/B,MAAM,CAACL,MAAM,KAAK,CAAC,EAAE;MACrByC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MAC/C;IACJ;IACA,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAACvC,MAAM,CAAC;IACpC,MAAMwC,gBAAgB,GAAGC,IAAI,CAACC,GAAG,CAAC,CAACtD,OAAO,EAAEkD,YAAY,CAACK,IAAI,CAAC;IAE9D,MAAMC,aAAa,GAAGhE,MAAM,CAACoB,MAAM,CAACI,GAAG,CAAC2B,CAAC,IAAI,CAACA,CAAC,CAAC,CAAC,EAAES,gBAAgB,CAAC;IACpE;;IAIA;IACA,MAAMK,IAAI,GAAGC,KAAK,CAACC,IAAI,CAAC;MAACpD,MAAM,EAAE6C;IAAgB,CAAC,EAAE,MAAM,EAAE,CAAC;IAC7DI,aAAa,CAAC1C,QAAQ,CAACU,OAAO,CAAC,CAACE,OAAO,EAAEkC,CAAC,KAAK;MAC3C,IAAIlC,OAAO,IAAG,CAAC,IAAIA,OAAO,GAAG0B,gBAAgB,EAAE;QAC/CK,IAAI,CAAC/B,OAAO,CAAC,CAACmC,IAAI,CAACjD,MAAM,CAACgD,CAAC,CAAC,CAAC;MAC7B;IACJ,CAAC,CAAC;IAEF,MAAME,WAAW,GAAGnD,cAAc,CAACC,MAAM,EAAE4C,aAAa,CAAC3C,SAAS,EAAG2C,aAAa,CAAC1C,QAAQ,CAAC;;IAI5F;IACA;IACA;;IAEA;IACA;IACA;;IAGA;IACA,MAAMiD,CAAC,GAAG1E,EAAE,CAAC2E,SAAS,CAAC,CAAC,CACnBvB,MAAM,CAACpD,EAAE,CAACwD,KAAK,CAACO,gBAAgB,CAAC,CAAC,CAClCP,KAAK,CAAC,CAACZ,MAAM,GAAGC,MAAM,CAACG,MAAM,EAAEH,MAAM,CAACC,GAAG,CAAC,CAAC,CAC3C8B,OAAO,CAAC,GAAG,CAAC;;IAEjB;IACA,MAAMC,MAAM,GAAGC,CAAC,IAAIA,CAAC,CACpBC,IAAI,CAAC,WAAW,EAAE,eAAenC,MAAM,GAAGC,MAAM,CAACG,MAAM,GAAG,CAAC,CAC3DgC,IAAI,CAAChF,EAAE,CAACiF,UAAU,CAAC/B,CAAC,CAAC,CAACgC,KAAK,CAACvC,KAAK,GAAG,EAAE,CAAC,CAAC,CACxCqC,IAAI,CAACF,CAAC,IAAIA,CAAC,CAACvC,MAAM,CAAC,SAAS,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC;;IAExC;IACA,MAAMyC,MAAM,GAAGL,CAAC,IAAIA,CAAC,CACpBC,IAAI,CAAC,WAAW,EAAE,aAAalC,MAAM,CAACI,IAAI,KAAK,CAAC,CAChD+B,IAAI,CAAChF,EAAE,CAACoF,QAAQ,CAACV,CAAC,CAAC,CAACW,UAAU,CAAEd,CAAC,IAAI,GAAGE,WAAW,CAACF,CAAC,CAAC,EAAE,CAAC,CAAC,CAC1DS,IAAI,CAACF,CAAC,IAAIA,CAAC,CAACvC,MAAM,CAAC,SAAS,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC;IAIxCJ,GAAG,CAACgD,MAAM,CAAC,GAAG,CAAC,CAACN,IAAI,CAACH,MAAM,CAAC;IAC5BvC,GAAG,CAACgD,MAAM,CAAC,GAAG,CAAC,CAACN,IAAI,CAACG,MAAM,CAAC;;IAE5B;IACA7C,GAAG,CAACgD,MAAM,CAAC,GAAG,CAAC,CACd7C,SAAS,CAAC,MAAM,CAAC,CACjBnC,IAAI,CAAC8D,IAAI,CAAC,CACVmB,IAAI,CAAC,MAAM,CAAC,CACZR,IAAI,CAAC,GAAG,EAAEzB,CAAC,IAAIJ,CAAC,CAAClD,EAAE,CAACiE,GAAG,CAACX,CAAC,CAAC,CAAC,CAAC,CAC5ByB,IAAI,CAAC,GAAG,EAAE,CAACzB,CAAC,EAAEiB,CAAC,KAAKG,CAAC,CAACH,CAAC,CAAC,CAAC,CACzBQ,IAAI,CAAC,OAAO,EAAEzB,CAAC,IAAIJ,CAAC,CAAClD,EAAE,CAACwF,GAAG,CAAClC,CAAC,CAAC,CAAC,GAAGJ,CAAC,CAAClD,EAAE,CAACiE,GAAG,CAACX,CAAC,CAAC,CAAC,CAAC,CAC/CyB,IAAI,CAAC,QAAQ,EAAEL,CAAC,CAACe,SAAS,CAAC,CAAC,CAAC,CAC7BV,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC;EAE3B,CAAC;EAED,oBACA7E,OAAA;IAAAwF,QAAA,eACIxF,OAAA;MAAKyF,SAAS,EAAC,2BAA2B;MAAAD,QAAA,gBACtCxF,OAAA;QAAK0F,GAAG,EAAEpF,MAAO;QAACmC,KAAK,EAAE,GAAI;QAACC,MAAM,EAAE;MAAI;QAAAiD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAEjD9F,OAAA;QAAO+F,OAAO,EAAC,OAAO;QAAAP,QAAA,EAAC;MAAO;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACtC9F,OAAA;QAAQgG,EAAE,EAAC,OAAO;QAAClF,KAAK,EAAEP,KAAM;QAAC0F,QAAQ,EAAEtF,iBAAkB;QAAA6E,QAAA,EACxDpF,IAAI,CAAC,CAAC,CAAC,IAAIa,MAAM,CAACC,IAAI,CAACd,IAAI,CAAC,CAAC,CAAC,CAAC,CAACqB,GAAG,CAACyE,GAAG,iBACpClG,OAAA;UAAkBc,KAAK,EAAEoF,GAAI;UAAAV,QAAA,EAAEU;QAAG,GAArBA,GAAG;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA2B,CAC9C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eACT9F,OAAA;QAAAwF,QAAA,GAAO,WAEH,eAAAxF,OAAA;UAAOmG,IAAI,EAAC,QAAQ;UAACrF,KAAK,EAAEL,OAAQ;UAACwF,QAAQ,EAAElF;QAAoB;UAAA4E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACzF,EAAA,CA/IIF,OAAO;AAAAiG,EAAA,GAAPjG,OAAO;AAiJb,eAAeA,OAAO;AAAC,IAAAiG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}